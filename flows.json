[{"id":"8f8f43f7.01481","type":"tab","label":"Dashboard","disabled":false,"info":""},{"id":"960d5a8b.8e7398","type":"tab","label":"Water","disabled":false,"info":""},{"id":"865fb592.2877c8","type":"mqtt-broker","z":"","name":"localhost-mosquitto","broker":"localhost","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"d159396.8c5adc8","type":"mongodb","z":"","hostname":"127.0.0.1","port":"27017","db":"water","name":""},{"id":"3989bd20.f78b52","type":"uibuilder","z":"8f8f43f7.01481","name":"react_ui","topic":"","url":"react_ui","fwdInMessages":false,"allowScripts":false,"allowStyles":false,"debugFE":false,"copyIndex":false,"template":"","x":740,"y":120,"wires":[["1925e68c.fc23f9"],[]]},{"id":"24dc4c67.4103f4","type":"mqtt out","z":"960d5a8b.8e7398","name":"","topic":"water_monitor/valve_control","qos":"","retain":"","broker":"865fb592.2877c8","x":900,"y":440,"wires":[]},{"id":"77cec268.a1011c","type":"mqtt out","z":"960d5a8b.8e7398","name":"","topic":"water_monitor/config","qos":"","retain":"","broker":"865fb592.2877c8","x":880,"y":560,"wires":[]},{"id":"992ceb5.f73f818","type":"mqtt out","z":"960d5a8b.8e7398","name":"","topic":"water_monitor/status_request","qos":"","retain":"","broker":"865fb592.2877c8","x":910,"y":500,"wires":[]},{"id":"641f97bc.a21fe8","type":"function","z":"960d5a8b.8e7398","name":"set button text","func":"var obj = JSON.parse(msg.payload);\n// below code is wrong.  needs to use above object\n/*if (msg.payload == \"open\"){\n    flow.set(\"button_cmd\", \"close\");\n    newMsg = { payload: \"close\", \n                enabled: true };\n} else if (msg.payload == \"closed\"){\n    flow.set(\"button_cmd\", \"open\");\n    newMsg = { payload: \"open\",\n                enabled: true };\n} else if (msg.payload == \"closing\") {\n    flow.set(\"button_cmd\", \"open\");\n    newMsg = { payload: \"open\",\n                enabled: true };\n} else if (msg.payload == \"opening\") {\n    flow.set(\"button_cmd\", \"close\");\n    newMsg = { payload: \"close\",\n                enabled: true };\n}\nreturn newMsg;*/","outputs":1,"noerr":0,"x":540,"y":380,"wires":[[]]},{"id":"f9323c77.3a6d1","type":"switch","z":"960d5a8b.8e7398","name":"","property":"topic","propertyType":"msg","rules":[{"t":"eq","v":"water_monitor/flow_meter","vt":"str"},{"t":"eq","v":"water_monitor/valve_status","vt":"str"},{"t":"eq","v":"water_monitor/config_status","vt":"str"}],"checkall":"false","repair":false,"outputs":3,"x":410,"y":300,"wires":[["57c4d280.1e83ac"],[],["cea90901.c67928"]],"outputLabels":["flow_meter","valve_status","config_status"]},{"id":"ad492a61.1c54d8","type":"mqtt in","z":"960d5a8b.8e7398","name":"","topic":"water_monitor/#","qos":"0","datatype":"auto","broker":"865fb592.2877c8","x":120,"y":300,"wires":[["699ef694.57f4c8"]]},{"id":"80f459a9.9dd6f8","type":"inject","z":"960d5a8b.8e7398","name":"on startup","topic":"","payload":"","payloadType":"str","repeat":"","crontab":"","once":true,"onceDelay":"0","x":130,"y":40,"wires":[["4123a6a8.b1dac8"]]},{"id":"922e897f.95aa08","type":"function","z":"960d5a8b.8e7398","name":"when reconnected","func":"if (msg.payload == \"no timeout\") {\n    flow.set(\"water_monitor_online\", true);\n    //var newMsg = { payload: flow.get(\"wm_config_payload\")};\n    return { payload: flow.get(\"wm_config_payload\")};\n} else if (msg.payload == \"timeout\") {\n    flow.set(\"water_monitor_online\", false);\n    return null;\n}","outputs":1,"noerr":0,"x":530,"y":560,"wires":[["77cec268.a1011c","422a397b.8809a8"]]},{"id":"4123a6a8.b1dac8","type":"function","z":"960d5a8b.8e7398","name":"set vars & funcs","func":"flow.set(\"reports_per_second\", 1);\nflow.set(\"wm_config_payload\", \"reports_per_second:\"+flow.get(\"reports_per_second\"));\nflow.set(\"TimeoutMs\", 15*60*1000) //15 minutes in milliseconds\n\n//connect to water database\nvar mongodb = global.get('mongodb')\nflow.set(\"mongoDbWaterUrl\", 'mongodb://nodered:noderedpassword@localhost:27017/?authMechanism=SCRAM-SHA-1&authSource=water')\n\nmongodb.MongoClient.connect(flow.get('mongoDbWaterUrl'), {native_parser:true}, function(err, client) {\n    if(err){\n        node.error(err)\n    } else {\n        flow.set(\"waterDb\", client.db('water'))\n        flow.set('waterDbDailyColl', client.db('water').collection(\"daily\"))\n    }\n})\n\n//source identification vars\nflow.set(\"prevFlow\", 0)\nflow.set(\"lastStableFlow\", 0)\nflow.set(\"driftMargin\", 1)\nflow.set(\"inTransition\", false)\nflow.set(\"sourcesOn\", [])\n\nif(!flow.get(\"sourceList\", \"file\")){ \n    sourceList = [\n        { name: \"ktchn sink\", clicks: 13, quantity: 1 },\n        { name: \"bath sink\",  clicks: 17, quantity: 2 },\n        { name: \"dishwasher\", clicks: 10, quantity: 1 },\n        { name: \"toilet\",     clicks: 41, quantity: 2 },\n        { name: \"tub\",        clicks: 61, quantity: 1 },\n        { name: \"shower\",     clicks: 28, quantity: 1 },\n        { name: \"laundry\",    clicks: 33, quantity: 1 },\n        { name: \"studio\",     clicks: 36, quantity: 1 }\n    ]\n    flow.set(\"sourceList\", sourceList, \"file\") \n}\n\n//functions\nflow.set(\"clicksToGallons\", function(clicks) {return (0.000925824*clicks + 0.0015719)})\n\n//adding getWeek code to javascript Date object\nDate.prototype.getWeek = function (dowOffset) {\n/*getWeek() was developed by Nick Baicoianu at MeanFreePath: http://www.meanfreepath.com */\n    dowOffset = typeof(dowOffset) == 'number' ? dowOffset : 0; //default dowOffset to zero (0 is Sunday, 1 is Monday, etc...)\n    var newYear = new Date(this.getFullYear(),0,1);\n    var day = newYear.getDay() - dowOffset; //the day of week the year begins on\n    day = (day >= 0 ? day : day + 7);\n    var daynum = Math.floor((this.getTime() - newYear.getTime() - \n    (this.getTimezoneOffset()-newYear.getTimezoneOffset())*60000)/86400000) + 1;\n    var weeknum;\n    //if the year starts before the middle of a week\n    if(day < 4) {\n        weeknum = Math.floor((daynum+day-1)/7) + 1;\n        if(weeknum > 52) {\n            debugger;\n            nYear = new Date(this.getFullYear() + 1,0,1);\n            nday = nYear.getDay() - dowOffset;\n            nday = nday >= 0 ? nday : nday + 7;\n            /*if the next year starts before the middle of\n              the week, it is week #1 of that year*/\n            weeknum = nday < 4 ? 1 : 53;\n        }\n    }\n    else {\n        weeknum = Math.floor((daynum+day-1)/7);\n    }\n    return weeknum;\n}\n\nflow.set(\"gateOpen\", true)","outputs":1,"noerr":0,"x":320,"y":40,"wires":[[]]},{"id":"e199f265.47ce6","type":"timeout","z":"960d5a8b.8e7398","name":"timeout","outtopic":"","outsafe":"no timeout","outwarning":"Warning","outunsafe":"timeout","warning":"0","timer":"5","repeat":false,"again":false,"x":300,"y":560,"wires":[[]]},{"id":"422a397b.8809a8","type":"change","z":"960d5a8b.8e7398","name":"","rules":[{"t":"set","p":"payload","pt":"msg","to":"none","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":660,"y":500,"wires":[["992ceb5.f73f818"]]},{"id":"9e917171.007cd","type":"link out","z":"960d5a8b.8e7398","name":"water daily","links":["19a0b940.f26c87"],"x":1210,"y":80,"wires":[],"l":true},{"id":"820ba66b.ca0938","type":"link in","z":"8f8f43f7.01481","name":"water flow","links":["e7a29659.12ef58"],"x":180,"y":100,"wires":[["794fef6a.78baa"]],"l":true},{"id":"5e51bd8d.486ec4","type":"inject","z":"960d5a8b.8e7398","name":"","topic":"water_monitor/flow_meter","payload":"50","payloadType":"num","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":180,"y":220,"wires":[["699ef694.57f4c8"]]},{"id":"e7a29659.12ef58","type":"link out","z":"960d5a8b.8e7398","name":"water flow","links":["820ba66b.ca0938"],"x":1200,"y":160,"wires":[],"l":true},{"id":"19a0b940.f26c87","type":"link in","z":"8f8f43f7.01481","name":"water daily","links":["9e917171.007cd","7876e37b.8716cc"],"x":180,"y":140,"wires":[["5c3bebc5.a3d204"]],"l":true},{"id":"794fef6a.78baa","type":"function","z":"8f8f43f7.01481","name":"water:flow formatting","func":"return {payload: {water: {liveInfo: {flow: msg.payload.toFixed(1)}}}}","outputs":1,"noerr":0,"x":360,"y":100,"wires":[["5bc47948.7f16a8"]]},{"id":"5c3bebc5.a3d204","type":"function","z":"8f8f43f7.01481","name":"water:usage formatting","func":"return {payload: {water: {liveInfo: {usage: msg.payload.toFixed(0)}}}, reset: msg.reset}","outputs":1,"noerr":0,"x":360,"y":140,"wires":[["8385c389.7de6d"]]},{"id":"1925e68c.fc23f9","type":"function","z":"8f8f43f7.01481","name":"msg router","func":"switch(msg.topic) {\n  case \"dashboard\":\n    return [msg, null, null]\n    break;\n  case \"water\":\n    return [null, msg, null]\n    break;\n  default:\n    return [null, null, msg]\n}","outputs":3,"noerr":0,"x":890,"y":120,"wires":[["3989bd20.f78b52"],["99c343e2.45a4d"],[]],"outputLabels":["dashboard","water","default"]},{"id":"25701d18.bfc8e2","type":"link in","z":"960d5a8b.8e7398","name":"UI request","links":["99c343e2.45a4d","b72764fa.7a8a68"],"x":100,"y":120,"wires":[["b1821932.a25958"]],"l":true},{"id":"99c343e2.45a4d","type":"link out","z":"8f8f43f7.01481","name":"request to water","links":["25701d18.bfc8e2"],"x":1100,"y":100,"wires":[],"l":true},{"id":"b1821932.a25958","type":"function","z":"960d5a8b.8e7398","name":"request router","func":"if(!(msg.payload.liveCard == null)){\n    switch(msg.payload.liveCard) {\n      case \"initialize\":\n        return [{payload: \"initialize\"}, null]\n        break;\n      default:\n        return [null, null]\n    }\n} else if(!(msg.payload.chart == null)){\n    return [null, {payload: msg.payload.chart}]\n}","outputs":2,"noerr":0,"x":260,"y":120,"wires":[["fd517ee2.6d085"],["84caffe0.b23b5","8240be10.f697f"]],"outputLabels":["liveCard","chart"]},{"id":"9582ff31.ef3bf","type":"inject","z":"960d5a8b.8e7398","name":"","topic":"water","payload":"","payloadType":"str","repeat":"1","crontab":"","once":false,"onceDelay":0.1,"x":120,"y":180,"wires":[["b33249b4.ab2f58"]]},{"id":"b33249b4.ab2f58","type":"function","z":"960d5a8b.8e7398","name":"Random","func":"rnd = (Math.random() * 150).toFixed(0);\nreturn {topic: \"water_monitor/flow_meter\", payload: rnd};","outputs":1,"noerr":0,"x":240,"y":180,"wires":[[]]},{"id":"cea90901.c67928","type":"function","z":"960d5a8b.8e7398","name":"set reports_per_second","func":"var obj = JSON.parse(msg.payload);\nflow.set(\"reports_per_second\", obj.reports_per_second)\nreturn {payload: flow.get(\"reports_per_second\")}","outputs":1,"noerr":0,"x":570,"y":420,"wires":[[]]},{"id":"6fbb6018.f9c2e","type":"inject","z":"960d5a8b.8e7398","name":"water_monitor/config_status...","topic":"water_monitor/config_status","payload":"{\"reports_per_second\":2}","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":180,"y":260,"wires":[[]]},{"id":"8001c5fb.066008","type":"debug","z":"8f8f43f7.01481","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":750,"y":260,"wires":[]},{"id":"fd517ee2.6d085","type":"function","z":"960d5a8b.8e7398","name":"today/yesterday gallons","func":"Date = class extends Date {\n  constructor(...options) {\n    if (options.length) {\n      super(...options);\n    } else {\n      super(flow.get(\"currentDate\"));\n    }\n  }\n}\n\nvar todayStart = new Date()\nvar todayEnd = new Date(todayStart)\nvar yesterdayStart = new Date()\nyesterdayStart.setDate(todayStart.getDate()-1)\nvar yesterdayEnd = new Date(yesterdayStart)\ntodayStart.setHours(0,0,0,0)\ntodayEnd.setHours(24,0,0,0)\nyesterdayStart.setHours(0,0,0,0)\nyesterdayEnd.setHours(24,0,0,0)\n//get today allTotal\nflow.get('waterDbDailyColl').findOne({created: { $gt:todayStart, $lt:todayEnd }}, {allTotal: 1}, function(err, doc) {\n    if(err){ node.error(err) } \n    else {\n        if(doc){\n            if(msg.payload === \"initialize\" || msg.payload === \"new day\"){\n                node.send([{payload: doc.allTotal, reset: true}, null])\n            } else {\n                node.send([{payload: doc.allTotal}, null])\n            }\n        }\n        else {\n            node.send([{payload: 0}, null]) //no doc so today's allTotal must be zero\n        }\n    }\n})\nif(msg.payload === \"initialize\" || msg.payload === \"new day\"){\n    //get yesterday allTotal\n    flow.get('waterDbDailyColl').findOne({created: { $gt:yesterdayStart, $lt:yesterdayEnd }}, {allTotal: 1}, function(err, doc) {\n        if(err){ node.error(err) } \n        else {\n            if(doc){\n                node.send([null, {topic: \"yesterday\", payload: {total: doc.allTotal, tillNow: 0}}])\n            }\n            else {\n                node.send([null, {topic: \"yesterday\", payload: {total: null, tillNow: null}}])\n            }\n        }\n    })\n}","outputs":2,"noerr":0,"x":690,"y":100,"wires":[["6b68cef9.9fa15","9e917171.007cd"],["4cd16a2b.3c3984"]],"outputLabels":["today","yesterday"]},{"id":"423e65d8.5a5d7c","type":"link in","z":"8f8f43f7.01481","name":"water totals","links":["607a1016.60844"],"x":170,"y":180,"wires":[["9f7d4c9e.5568f"]],"l":true},{"id":"9f7d4c9e.5568f","type":"function","z":"8f8f43f7.01481","name":"water:totals formatting","func":"var newMsg = msg\n\nObject.keys(newMsg.payload).forEach(function(key,index) {\n    if(!(newMsg.payload[key].total == null)){\n        newMsg.payload[key].total = Number(newMsg.payload[key].total.toFixed(0))\n    } \n    if(!(newMsg.payload[key].tillNow == null)){\n        newMsg.payload[key].tillNow = Number(newMsg.payload[key].tillNow.toFixed(0))\n    }\n});\n\nreturn {payload: {water: {liveInfo: {totals: newMsg.payload}}}}","outputs":1,"noerr":0,"x":360,"y":180,"wires":[["58eefa4.df62204"]]},{"id":"607a1016.60844","type":"link out","z":"960d5a8b.8e7398","name":"water totals","links":["423e65d8.5a5d7c"],"x":1210,"y":120,"wires":[],"l":true},{"id":"57c4d280.1e83ac","type":"function","z":"960d5a8b.8e7398","name":"update flow, gallons, sources","func":"Date = class extends Date {\n  constructor(...options) {\n    if (options.length) {\n      super(...options);\n    } else {\n      super(flow.get(\"currentDate\"));\n    }\n  }\n}\n\nmsg.payload = Number(msg.payload)\n\n//get last date we checked\nvar waterDateLastSeen\nvar waterDateLastSeenStr = flow.get(\"waterDateLastSeen\", \"file\")\nif(waterDateLastSeenStr){\n    waterDateLastSeen = new Date(waterDateLastSeenStr)\n} else {\n    waterDateLastSeen = new Date()\n}\n\nconst now = new Date()\n\n//update date last seen to now\nflow.set(\"waterDateLastSeen\", now, \"file\")\n\n//check for new day\nvar whatsNew = {newDay: false, nowDate: now, lastSeenDate: waterDateLastSeen}\nif (!(waterDateLastSeen.getDate() == now.getDate() &&\n    waterDateLastSeen.getMonth() == now.getMonth() &&\n    waterDateLastSeen.getFullYear() == now.getFullYear())){\n    whatsNew.newDay = true\n    if(waterDateLastSeen.getWeek(1) !== now.getWeek(1)){ //1 sets first day of week to Monday\n        whatsNew.newWeek = true\n    }\n    if(waterDateLastSeen.getMonth() !== now.getMonth()){\n        whatsNew.newMonth = true\n        if(waterDateLastSeen.getFullYear() !== now.getFullYear()){\n            whatsNew.newYear = true\n        }\n    }\n}\n\n//check for incomplete today/lastday\nvar todayIncomplete = null\nvar lastSeenIncomplete = null\nif((now.getTime()-waterDateLastSeen.getTime())>flow.get(\"TimeoutMs\")){\n    //if more than timeout since midnight\n    var lastMidnight = new Date(now.getTime())\n    lastMidnight.setHours(0,0,0,0)\n    if ((now.getTime()-lastMidnight.getTime())>flow.get(\"TimeoutMs\")){\n        todayIncomplete = true\n    }\n    if (whatsNew.newDay) {\n        var waterDateLastSeenMidnight = new Date(waterDateLastSeen.getTime())\n        waterDateLastSeenMidnight.setHours(24,0,0,0)\n        if((waterDateLastSeenMidnight.getTime()-waterDateLastSeen.getTime())>flow.get(\"TimeoutMs\")){\n            lastSeenIncomplete = true\n        }\n    }\n}\n\n//handle new day\nif(whatsNew.newDay){\n    if(lastSeenIncomplete){\n        // update last seen doc to incomplete\n        var start = new Date(waterDateLastSeen.getTime())\n        var end = new Date(start.getTime())\n        start.setHours(0,0,0,0)\n        end.setHours(24,0,0,0)\n        var doc = {\n            $set: { incomplete : true },\n            $currentDate: {modified: true}\n        }\n        flow.get('waterDbDailyColl').update({created: { $gt:start, $lt:end }}, doc, {w: 1}, function(err, result) {\n            if(err){ node.error(err) } \n            else {\n                node.send([null, {payload: whatsNew}, null])\n            }\n        })\n    } else {\n        node.send([null, {payload: whatsNew}, null])\n    }\n}\n\n//node.send([null, null, null, {payload: msg.payload, prevFlow: flow.get(\"prevFlow\"), margin: (flow.get(\"sourcesOn\").length || 1)*flow.get(\"driftMargin\"), sourcesOn: flow.get(\"sourcesOn\")}])\n//identify source\nif(flow.get(\"inTransition\")) {\n    var isTransitioning = Math.abs(msg.payload-flow.get(\"prevFlow\"))>flow.get(\"driftMargin\")\n} else {\n    var isTransitioning = Math.abs(msg.payload-flow.get(\"prevFlow\"))>((flow.get(\"sourcesOn\").length || 1)*flow.get(\"driftMargin\"))\n}\n//node.send([null, null, null, {isTransitioning: isTransitioning}])\nif(isTransitioning){\n    if(!flow.get(\"inTransition\")){\n        flow.set(\"inTransition\", true)\n        flow.set(\"transitionData\", [{clicks: msg.payload, created: now, source: \"unknown\"}])\n    } else {\n        var transitionData = flow.get(\"transitionData\")\n        transitionData.push({clicks: msg.payload, created: now, source: \"unknown\"})\n        flow.set(\"transitionData\", transitionData)\n    }\n    //node.send([null, null, null, {transitionData: flow.get(\"transitionData\")}])\n    flow.set(\"prevFlow\", msg.payload)\n} else { //not in transition\n    if(flow.get(\"inTransition\")){ //transition is completed\n        var transitionData = flow.get(\"transitionData\")\n        var signature = msg.payload-flow.get(\"lastStableFlow\")\n        //node.send([null, null, null, {where: \"after transition\", lastStableFlow: flow.get(\"lastStableFlow\"), signature: signature}])\n        var sourcesOn = flow.get(\"sourcesOn\")\n        var currentDrift = (sourcesOn.length || 1)*flow.get(\"driftMargin\")\n        var sourceList = flow.get(\"sourceList\", \"file\")\n        var found = false\n        for(let i = 0; i<sourceList.length; i++){\n            if(Math.abs((Math.abs(signature)-sourceList[i].clicks))<=flow.get(\"driftMargin\")){//can't use currentDrift because reference signatures are too close\n                var currentSourcesOn = {clicks: 0, quantity: 1}\n                if(signature>0){ //position transition so add it\n                    //check that we don't already have max sources of this type on\n                    var numberOfTheseSources = 0\n                    for(var j=0; j<sourcesOn.length; j++){\n                        if(sourcesOn[j].name === sourceList[i].name)\n                        { \n                            numberOfTheseSources = sourcesOn[j].quantity \n                            break\n                        }\n                    }\n                    if(numberOfTheseSources < sourceList[i].quantity){\n                        found = true\n                        if(numberOfTheseSources === 0){ //if doesn't exist in sourcesOn yet...\n                            sourcesOn.push({name: sourceList[i].name, clicks: sourceList[i].clicks, quantity: 1})\n                        } else { //if exists already, add another\n                            //node.send([null, null, null, {sourcesOn: sourcesOn, currentSourcesOn: currentSourcesOn}])\n                            currentSourcesOn.clicks = sourcesOn[j].clicks\n                            sourcesOn[j].clicks += sourceList[i].clicks\n                            sourcesOn[j].quantity++\n                            currentSourcesOn.quantity = sourcesOn[j].quantity\n                            //node.send([null, null, null, {sourcesOn: sourcesOn, currentSourcesOn: currentSourcesOn}])\n                        }\n                    }\n                } else { //negative transition so remove it\n                    for(let j=0; j<sourcesOn.length; j++){\n                        if(sourcesOn[j].name === sourceList[i].name){\n                            flow.set(\"lastStableFlow\", msg.payload) //set here so we can get correct clicks in transitionData\n                            found=true\n                            if(sourcesOn[j].quantity>1){\n                                sourcesOn[j].clicks -= sourceList[i].clicks\n                                sourcesOn[j].quantity--\n                                currentSourcesOn.clicks = sourcesOn[j].clicks\n                                currentSourcesOn.quantity = sourcesOn[j].quantity\n                            } else {\n                                sourcesOn.splice(j, 1)\n                            }\n                            break\n                        }\n                    }\n                }\n                //node.send([null, null, null, {sourcesOn: sourcesOn, currentSourcesOn: currentSourcesOn}])\n                if(found===true){ //could be, if decrease, that match was found but that source was never added so it should be taken from \"unknown\"\n                    for(let k=0; k<transitionData.length; k++){\n                        transitionData[k].source = sourceList[i].name\n                        transitionData[k].clicks = currentSourcesOn.clicks + transitionData[k].clicks - flow.get(\"lastStableFlow\")\n                        transitionData[k].quantity = currentSourcesOn.quantity\n                    }\n                }\n                break\n            }\n        }\n        if(!found) {\n            for(let k=0; k<transitionData.length; k++){\n                var lastStableSources = 0\n                for(let i=0; i<sourcesOn.length; i++){\n                    lastStableSources += sourcesOn[i].clicks\n                }\n                if(transitionData[k].clicks > lastStableSources){ //transition is positive: lastStableSources will update every iteration\n                    if(sourcesOn.length>0 && sourcesOn[0].name===\"unknown\") { //if \"unknown\" is in array, it will always be first\n                        sourcesOn[0].clicks += transitionData[k].clicks-lastStableSources\n                    } else { //need to add \"unknown\" as first element in array\n                        sourcesOn.unshift({name: \"unknown\", clicks: transitionData[k].clicks-lastStableSources, quantity: 1})\n                    }\n                    transitionData[k].clicks = sourcesOn[0].clicks\n                    transitionData[k].quantity = 1\n                }\n                else {\n                    var shouldSubtract = true\n                    while(shouldSubtract){\n                        if(sourcesOn.length > 0){ //transition was negative\n                            sourcesOn[0].clicks = sourcesOn[0].clicks+transitionData[k].clicks-lastStableSources\n                            if(sourcesOn[0].name !== \"unknown\" || sourcesOn[0].clicks <= 0){ //need to delete \"unknown\" as well if it has reached zero\n                                //delete transition source entry from this transitionData to end from database\n                                for(let m=k; m<transitionData.length; m++){\n                                    deleteSourceFromDatabase(transitionData[m].created, sourcesOn[0].name)\n                                }\n                            }\n                            if(sourcesOn[0].clicks <= 0){\n                                //node.send([null, null, null, {where: \"nut: <=0\", sourcesOn: sourcesOn, lastStableSources: lastStableSources, transitionData: transitionData}])\n                                //reduce lastStableSources for next subtraction\n                                lastStableSources = lastStableSources+(transitionData[k].clicks-lastStableSources+Math.abs(sourcesOn[0].clicks))\n                                sourcesOn.splice(0, 1)\n                            }\n                            else {\n                                transitionData[k].clicks = sourcesOn[0].clicks\n                                transitionData[k].source = \"unknown\"\n                                transitionData[k].quantity = 1\n                                sourcesOn[0].name = \"unknown\"\n                                shouldSubtract = false\n                                //node.send([null, null, null, {where: \"nut: >0\", sourcesOn: sourcesOn, lastStableSources: lastStableSources, transitionData: transitionData}])\n                            }\n                        } else { shouldSubtract = false } //to prevent infinite loop if leftovers in transitionData. what to do with leftovers in transistionData?\n                    }\n                }\n            }\n            if(msg.payload === 0) { sourcesOn = [] } //why do we need this?\n        }\n        \n        //try to match \"unknown\" source\n        if((sourcesOn.length>0 && sourcesOn[0].name===\"unknown\")){\n            //node.send([null, null, null, {where: \"match unknown code\", sourcesOn: sourcesOn}])\n            var foundOne = false\n            for(let i = 0; i<sourceList.length; i++){\n                if(Math.abs(sourcesOn[0].clicks-sourceList[i].clicks)<=flow.get(\"driftMargin\")){//can't use currentDrift because reference signatures are too close\n                    //check that we don't already have max sources of this type on\n                    var numberOfTheseSources = 0, currentSourcesOn = {clicks: 0, quantity: 1}\n                    for(var j=0; j<sourcesOn.length; j++){\n                        if(sourcesOn[j].name === sourceList[i].name)\n                        { \n                            numberOfTheseSources = sourcesOn[j].quantity \n                            break\n                        }\n                    }\n                    if(numberOfTheseSources < sourceList[i].quantity){\n                        if(numberOfTheseSources === 0){\n                            sourcesOn[0].name = sourceList[i].name\n                            sourcesOn[0].quantity = 1\n                            currentSourcesOn.clicks = sourcesOn[0].clicks\n                            currentSourcesOn.quantity = sourcesOn[0].quantity\n                        } else {\n                            sourcesOn[j].clicks += sourceList[i].clicks\n                            sourcesOn[j].quantity++\n                            currentSourcesOn.clicks = sourcesOn[0].clicks\n                            currentSourcesOn.quantity = sourcesOn[0].quantity\n                        }\n                        foundOne = true\n                        //delete last unknown from db, since we have match\n                        deleteSourceFromDatabase(transitionData[transitionData.length-1].created, \"unknown\")\n                        //change last transition data to be the new match\n                        if(transitionData.length>0){\n                            transitionData[transitionData.length-1].source = sourceList[i].name\n                            transitionData[transitionData.length-1].clicks = currentSourcesOn.clicks\n                            transitionData[transitionData.length-1].quantity = currentSourcesOn.quantity\n                        }\n                        break\n                    }\n                }\n            }\n        }\n        \n        //update db with transitionData\n        //node.send([null, null, null, {where: \"db update transition\", sourcesOn: sourcesOn, transitionData: transitionData}])\n        for(let l=0; l<transitionData.length; l++){\n            var start = new Date(transitionData[l].created)\n            var end = new Date(start.valueOf())\n            start.setHours(0,0,0,0)\n            end.setHours(24,0,0,0)\n            if(transitionData[l].clicks <= 0){ //delete any entries that would have 0 or negative clicks\n                deleteSourceFromDatabase(transitionData[l].created, transitionData[l].source)\n            } else {\n                flow.get(\"waterDbDailyColl\").bulkWrite( [\n                    //first updates entry if it exists.\n                    { updateOne : {\n                       filter : { created: { $gt:start, $lt:end } }, \n                       update : { $set : { \"timeRecord.$[t].sources.$[source].clicks\": Number(transitionData[l].clicks), \n                                            \"timeRecord.$[t].sources.$[source].quantity\": Number(transitionData[l].quantity) } },\n                       arrayFilters : [ { \"t.created\": new Date(transitionData[l].created) }, { \"source.name\": transitionData[l].source } ] \n                    } },\n                    //second update creates entry if doesn't exist. NOTE: must match the full subdocument in array element! \n                    { updateOne : {\n                       filter : { created: { $gt:start, $lt:end } }, \n                       update : { $addToSet : { \"timeRecord.$[t].sources\": {name: transitionData[l].source, \n                                                                    clicks: Number(transitionData[l].clicks), \n                                                                    quantity: transitionData[l].quantity }}},\n                       arrayFilters : [ { \"t.created\": new Date(transitionData[l].created) } ]\n                    } }\n                ] )\n            }\n        }\n        \n        //update global variables\n        flow.set(\"sourcesOn\", sourcesOn)\n        flow.set(\"lastStableFlow\", msg.payload)\n        flow.set(\"inTransition\", false)\n    }\n    //set \"prevFlow\", signature calculation uses \"lastStableFlow\" so we don't have to worry about slow drifting\n    flow.set(\"prevFlow\", msg.payload)\n    //failsafe\n    if(msg.payload === 0){ flow.set(\"sourcesOn\", []) }\n}\nnode.send([null, null, { sources: flow.get(\"sourcesOn\") }])\n\n//update database with flow, gallon\nif(msg.payload !== 0 || todayIncomplete  || whatsNew.newDay) { //if newday -> need to have a day doc even if there is no flow during that day\n    //search for today's doc\n    var start = new Date(now.valueOf())\n    var end = new Date(start.valueOf())\n    start.setHours(0,0,0,0)\n    end.setHours(24,0,0,0)\n    var doc = {\n        $setOnInsert: { \n            created: now\n        },\n        $currentDate: {modified: true}\n    }\n    if(msg.payload !== 0){\n        doc.$inc =  { allTotal: flow.get('clicksToGallons')(msg.payload) },\n        doc.$push = { timeRecord: { clicks: msg.payload, created: now, sources: flow.get(\"sourcesOn\") }}\n    } else { //in case non-zero flow is triggering this new database entry (i.e. on a new day), we don't conflict with $inc.allTotal\n        doc.$setOnInsert.allTotal = 0\n    }\n    if(todayIncomplete){\n        doc.$set = { incomplete : true }\n    } else \n    { \n        doc.$set = { incomplete : false } \n    }\n    flow.get('waterDbDailyColl').updateOne({created: { $gt:start, $lt:end }}, doc, {upsert:true, w: 1}, function(err, result) {\n        if(err){ node.error(err) } \n        else {\n            node.send([{payload: flow.get('clicksToGallons')(msg.payload)*60}, null, null])\n        }\n    })\n}  else {\n    //send zero as flow data, this is used as trigger for getting today's prediction\n    node.send([{payload: 0}, null, null])\n}\n\nfunction deleteSourceFromDatabase(date, name) {\n    //node.send([null, null, null, {date: date, name: name}])\n    var start = new Date(date)\n    var end = new Date(start.valueOf())\n    start.setHours(0,0,0,0)\n    end.setHours(24,0,0,0)\n    flow.get(\"waterDbDailyColl\").updateOne(\n      { created: { $gt:start, $lt:end }},\n      { $pull: { \"timeRecord.$[t].sources\" : { name : name } } },\n      { arrayFilters : [ { \"t.created\": date } ] },\n      function(err, result) {\n        if(err){ node.error(err) } \n        else {\n            //node.send([null, null, null, {where: \"the delete\", result: result}])\n        }\n      }\n    )\n}","outputs":3,"noerr":0,"x":480,"y":180,"wires":[["e7a29659.12ef58","fd517ee2.6d085"],["e0a36cb5.e0925","97d83fd9.85102"],["d2c35a33.048b68"]],"outputLabels":["flow","new day","sources"]},{"id":"5bc47948.7f16a8","type":"rbe","z":"8f8f43f7.01481","name":"","func":"rbe","gap":"","start":"","inout":"out","property":"payload","x":530,"y":100,"wires":[["3989bd20.f78b52"]]},{"id":"8385c389.7de6d","type":"rbe","z":"8f8f43f7.01481","name":"","func":"rbe","gap":"","start":"","inout":"out","property":"payload","x":530,"y":140,"wires":[["3989bd20.f78b52"]]},{"id":"4cd16a2b.3c3984","type":"join","z":"960d5a8b.8e7398","name":"","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":true,"timeout":"","count":"3","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1070,"y":120,"wires":[["607a1016.60844"]]},{"id":"6b68cef9.9fa15","type":"function","z":"960d5a8b.8e7398","name":"today prediction","func":"Date = class extends Date {\n  constructor(...options) {\n    if (options.length) {\n      super(...options);\n    } else {\n      super(flow.get(\"currentDate\"));\n    }\n  }\n}\n\nvar todayStart = new Date()\nvar todayNow = new Date(todayStart.getTime())\ntodayStart.setHours(0,0,0,0)\nvar currentSecond = Math.floor((todayNow.getTime()-todayStart.getTime())/1000)\n\nflow.get('waterDbDailyColl').findOne({docName:\"averages\"}, {allAverage: 1, secondAverages: { $slice: [currentSecond, 1] }}, function(err, dailyAveragesDoc) {\n    if(err){ console.error(err) } \n    else if(dailyAveragesDoc && dailyAveragesDoc.allAverage){ //check doc exists and allAverage exists\n            if(dailyAveragesDoc.secondAverages.length > 0){ //check secondAverages had the element at the index we searched for\n                var averageGallonsSoFar = dailyAveragesDoc.secondAverages[0]//since we sliced in query, we only have 1 element in array\n                var todaysPrediction = dailyAveragesDoc.allAverage-(averageGallonsSoFar-Number(msg.payload))\n                \n                node.send([{topic: \"today\", payload: {total: todaysPrediction, tillNow: msg.payload}}, \n                    {topic: \"average\", payload: {total: dailyAveragesDoc.allAverage, tillNow: averageGallonsSoFar}}])\n            } else { //no secondAverages exists, but allAverage must exist\n                node.send([{topic: \"today\", payload: {total: msg.payload, tillNow: 0}}, \n                    {topic: \"average\", payload: {total: dailyAveragesDoc.allAverage, tillNow: 0}}]) //switch total and tillNow, react code uses divide by total\n            }\n    } else { //no averages doc exists\n        node.send([{topic: \"today\", payload: {total: msg.payload, tillNow: 0}}, //switch total and tillNow, react code uses divide by total\n            {topic: \"average\", payload: {total: null, tillNow: null}}])\n    }\n})","outputs":2,"noerr":0,"x":920,"y":100,"wires":[["4cd16a2b.3c3984"],["4cd16a2b.3c3984","97d83fd9.85102"]],"outputLabels":["today","average"]},{"id":"f07e87a.e046578","type":"function","z":"960d5a8b.8e7398","name":"update average","func":"var start = new Date(msg.payload.whatsNew.date) //todo: make sure this is working\nvar end = new Date(start.getTime())\nstart.setHours(0,0,0,0)\nend.setHours(24,0,0,0)\n//get first doc prior to today\nflow.get('waterDbDailyColl').findOne({created: { $lt:start }}, {gallons: 1, average: 1, numavg: 1}, \n    { sort: { _id: -1 }, limit: 1 }, function(err, doc) {\n    if(err){ node.error(err) } \n    else {\n        if(doc){\n            var newdoc = {  \n                $setOnInsert: { \n                    created: new Date(), \n                    gallons: 0\n                },\n                $currentDate: { modified: true }\n            }\n            if(!doc.incomplete) {\n                if(doc.average){\n                    newdoc.$set = { \n                        average : ((doc.average*doc.numavg)+doc.gallons)/(doc.numavg+1),\n                        numavg: doc.numavg+1\n                    }  \n                } else {\n                    newdoc.$set = { \n                        average : doc.gallons, \n                        numavg: 1\n                    } \n                }\n            } else { //doc incomplete\n                if(doc.average){ // don't use that day's gallon data, just copy the average over\n                    newdoc.$set = { \n                        average : doc.average, \n                        numavg : doc.numavg\n                    }  \n                } else { //if incomplete and no average, can't create an average\n                    node.send({payload: \"new day\", status: \"incomplete and no average\"})\n                    return\n                }\n            }\n            flow.get('waterDbDailyColl').updateOne({created: { $gt:start, $lt:end }}, newdoc, {upsert:true, w: 1}, function(err, result) {\n                if(err){ node.error(err) } \n                else {\n                    node.send({payload: \"new day\", status: result})\n                }\n            })\n        } else { //database has no previous documents\n            node.send({payload: \"new day\", status: \"no doc\"})\n        }\n    }\n})","outputs":1,"noerr":0,"x":760,"y":340,"wires":[[]]},{"id":"58eefa4.df62204","type":"rbe","z":"8f8f43f7.01481","name":"","func":"rbe","gap":"","start":"","inout":"out","property":"payload","x":530,"y":180,"wires":[["3989bd20.f78b52"]]},{"id":"e6cef52d.335ab8","type":"inject","z":"960d5a8b.8e7398","name":"","topic":"water","payload":"","payloadType":"str","repeat":"2","crontab":"","once":false,"onceDelay":0.1,"x":120,"y":360,"wires":[[]]},{"id":"a4b370b5.55262","type":"function","z":"960d5a8b.8e7398","name":"test Set","func":"var testPattern = flow.get(\"testAll\")\nif(flow.get(\"testIndex\")<testPattern.length){\n    var currentFlow = testPattern[flow.get(\"testIndex\")]\n    flow.set(\"testIndex\", flow.get(\"testIndex\")+1)\n    return {topic: \"water_monitor/flow_meter\", payload: currentFlow}\n} else {\n    return null\n}","outputs":1,"noerr":0,"x":260,"y":360,"wires":[[]]},{"id":"699ef694.57f4c8","type":"function","z":"960d5a8b.8e7398","name":"gate","func":"if(flow.get(\"waterDb\")===undefined){\n    //database not yet connected, do nothing\n} else if(flow.get(\"gateOpen\")===true) { //checking that all variable/function initialization has completed\n    return msg;\n}\n","outputs":1,"noerr":0,"x":290,"y":300,"wires":[["f9323c77.3a6d1"]]},{"id":"751a3797.a80e98","type":"function","z":"960d5a8b.8e7398","name":"test sets","func":"flow.set(\"testIndex\", 0)\n\n//test two known sources turn on at same time, then one drop out\nflow.set(\"test1a\", [0, 0, 32, 41, 49, 59, 58, 57, 45, 42, 41, 40, 30, 5, 0, 0])\n//test two known sources turn on at same time, then one drop out, all on top of a known\nflow.set(\"test1b\", [10, 10, 24, 45, 55, 56, 54, 55, 45, 38, 39, 37, 27, 27, 28, 14, 0, 0])\n\n//test known down to a different known\nflow.set(\"test2a\", [0, 0, 9, 24, 27, 28, 27, 27, 26, 22, 18, 17, 3, 0, 0])\n//test unknown down to known\nflow.set(\"test2b\", [0, 0, 13, 26, 25, 25, 24, 16, 10, 11, 10, 5, 0, 0])\n//test unknown up to unknown and down to unknown, all on top of a known\nflow.set(\"test2c\", [0, 0, 41, 41, 54, 67, 66, 66, 65, 69, 71, 72, 71, 71, 66, 61, 61, 61, 51, 41, 41, 41, 20, 0, 0 ])\n//test unknown up to known\nflow.set(\"test2d\", [0, 0, 13, 22, 23, 22, 26, 28, 27, 28, 20, 0, 0])\n\n//test two known sources drop out at same time to zero\nflow.set(\"test3a\", [0, 0, 13, 14, 12, 20, 30, 32, 31, 30, 25, 20, 15, 10, 5, 0, 0])\n//test two known sources drop out at same time to known\nflow.set(\"test3b\", [0, 0, 13, 14, 12, 20, 30, 32, 31, 31, 25, 20, 15, 10, 10, 11, 0, 0])\n//test two known sources drop out at same time to unknown\nflow.set(\"test3c\", [0, 0, 13, 14, 12, 20, 30, 32, 31, 30, 15, 6, 7, 6, 6, 0, 0])\n//test two known sources drop out at same time to unknown, on top of known\nflow.set(\"test3d\", [10, 10, 23, 24, 22, 30, 40, 42, 41, 40, 25, 16, 17, 16, 16, 10, 10])\n//test two known sources drop out at same time to known, on top of unknown\nflow.set(\"test3e\", [6, 6, 11, 19, 20, 18, 26, 36, 38, 37, 36, 21, 12, 13, 12, 12, 6, 6])\n\n//basic positive burst\nflow.set(\"test4a\", [0, 0, 3, 6, 2, 0, 0])\n//positive burst on top of known\nflow.set(\"test4b\", [0, 0, 5, 34, 34, 33, 36, 39, 35, 33, 32, 15, 5, 0, 0])\n//negative burst on top of known\nflow.set(\"test4c\", [0, 0, 5, 34, 34, 33, 30, 27, 31, 33, 32, 15, 5, 0, 0])\n//large negative burst on top of multiple knowns\nflow.set(\"test4d\", [13, 13, 54, 54, 34, 13, 3, 27, 33, 54, 54, 25, 0, 0])\n//positive burst on top of unknown\nflow.set(\"test4e\", [0, 0, 5, 34, 54, 53, 54, 57, 60, 56, 54, 53, 25, 0, 0])\n//negative burst on top of unknown\nflow.set(\"test4f\", [0, 0, 5, 34, 54, 53, 54, 51, 48, 50, 54, 53, 25, 0, 0])\n//negative burst from unknown to known on top of known\nflow.set(\"test4g\", [12, 13, 18, 47, 67, 66, 64, 61, 57, 44, 38, 32, 26, 22, 25, 30, 31, 30, 25, 20, 15, 10, 5, 0, 0])\n\n//slow positive drift with no knowns/unknowns, sudden drop\nflow.set(\"test5a\", [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 5, 0, 0])\n//slow positive drift on top of known, drop to known\nflow.set(\"test5b\", [10, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 15, 10, 10, 5, 0, 0])\n//slow positive drift, on top of known, drop to zero\nflow.set(\"test5c\", [10, 10, 11, 12, 13, 14, 15, 0, 0])\n//slow positive drift, on top of known, drop to low unknown\nflow.set(\"test5d\", [10, 10, 11, 12, 13, 14, 15, 2, 2, 0, 0])\n//slow negative drift, on top of known, jump to known\nflow.set(\"test5e\", [10, 10, 9, 8, 7, 6, 5, 10, 10, 0, 0])\n//slow positive drift on top of unknown & known, drop to known\nflow.set(\"test5f\", [13, 13, 28, 28, 29, 30, 31, 32, 33, 27, 23, 23, 0, 0])\n\n//attempt 2 quantity 1 sources in match going up\nflow.set(\"testSame\", [0, 0, 10, 10, 15, 20, 20, 15, 10, 10, 5, 0, 0])\n//attempt 2 quantity 1 sources in rematch going down\nflow.set(\"testSame2\", [0, 0, 10, 10, 15, 20, 25, 25, 20, 20, 15, 10, 10, 0, 0])\n//attempt 3 quantity 2 sources\nflow.set(\"testSame3\", [17, 17, 25, 34, 34, 42, 51, 51, 60, 68, 68, 60, 51, 51, 42, 34, 34, 25, 17, 17, 8, 0, 0])\n\n//test leftover in transitionData\nflow.set(\"testLeftover\", [6, 6, 11, 19, 20, 18, 26, 37, 37, 36, 36, 21, 12, 6, 0, 0])\n\n/*        { name: \"ktchn sink\", clicks: 13, quantity: 1 },\n        { name: \"bath sink\",  clicks: 17, quantity: 2 },\n        { name: \"dishwasher\", clicks: 10, quantity: 1 },\n        { name: \"toilet\",     clicks: 41, quantity: 2 },\n        { name: \"tub\",        clicks: 61, quantity: 1 },\n        { name: \"shower\",     clicks: 28, quantity: 1 },\n        { name: \"laundry\",    clicks: 33, quantity: 1 },\n        { name: \"studio\",     clicks: 36, quantity: 1 } */\n//ui tests\nflow.set(\"testAll\", [0, 0, 13, 13, 30, 30, 40, 40, 81, 81, 142, 142, 170, 170, 203, 203, 239, 239, 0, 0])","outputs":1,"noerr":0,"x":300,"y":80,"wires":[[]]},{"id":"d2c35a33.048b68","type":"link out","z":"960d5a8b.8e7398","name":"water sources","links":["41ced401.4b6fac"],"x":1220,"y":200,"wires":[],"l":true},{"id":"41ced401.4b6fac","type":"link in","z":"8f8f43f7.01481","name":"water sources","links":["d2c35a33.048b68"],"x":170,"y":220,"wires":[["da518dc6.4a46"]],"l":true},{"id":"da518dc6.4a46","type":"rbe","z":"8f8f43f7.01481","name":"","func":"rbe","gap":"","start":"","inout":"out","property":"sources","x":310,"y":220,"wires":[["324ebaba.989c06"]]},{"id":"324ebaba.989c06","type":"function","z":"8f8f43f7.01481","name":"water:sources formatting","func":"var newMsg = {payload: {water: {liveInfo: {sources: []}}}}\nfor (let i=0; i<msg.sources.length; i++){\n    for(let j=0; j<msg.sources[i].quantity; j++){\n        newMsg.payload.water.liveInfo.sources.push({name: msg.sources[i].name, clicks: msg.sources[i].clicks/msg.sources[i].quantity})\n    }\n}\nreturn newMsg;","outputs":1,"noerr":0,"x":490,"y":220,"wires":[["3989bd20.f78b52"]]},{"id":"84caffe0.b23b5","type":"function","z":"960d5a8b.8e7398","name":"get chartData","func":"if(msg.payload.range === \"now\"){\n    var chartData = {\n      chart: {\n        caption: \"Yearly Energy Production\",\n        numbersuffix: \" TWh\",\n        formatnumberscale: \"0\",\n        showvalues: \"0\",\n        drawcrossline: \"1\",\n        showsum: \"1\",\n        plottooltext: \"$dataValue from $seriesName\",\n        theme: \"candy\"\n      },\n      categories: [\n        {\n          category: [\n            {\n              label: \"Canada\"\n            },\n            {\n              label: \"China\"\n            },\n            {\n              label: \"Russia\"\n            },\n            {\n              label: \"Australia\"\n            },\n            {\n              label: \"United States\"\n            },\n            {\n              label: \"France\"\n            }\n          ]\n        }\n      ],\n      dataset: [\n        {\n          seriesname: \"Coal\",\n          data: [\n            {\n              value: \"400\"\n            },\n            {\n              value: \"830\"\n            },\n            {\n              value: \"500\"\n            },\n            {\n              value: \"420\"\n            },\n            {\n              value: \"790\"\n            },\n            {\n              value: \"380\"\n            }\n          ]\n        },\n        {\n          seriesname: \"Hydro\",\n          data: [\n            {\n              value: \"350\"\n            },\n            {\n              value: \"620\"\n            },\n            {\n              value: \"410\"\n            },\n            {\n              value: \"370\"\n            },\n            {\n              value: \"720\"\n            },\n            {\n              value: \"310\"\n            }\n          ]\n        },\n        {\n          seriesname: \"Nuclear\",\n          data: [\n            {\n              value: \"210\"\n            },\n            {\n              value: \"400\"\n            },\n            {\n              value: \"450\"\n            },\n            {\n              value: \"180\"\n            },\n            {\n              value: \"570\"\n            },\n            {\n              value: \"270\"\n            }\n          ]\n        },\n        {\n          seriesname: \"Gas\",\n          data: [\n            {\n              value: \"180\"\n            },\n            {\n              value: \"330\"\n            },\n            {\n              value: \"230\"\n            },\n            {\n              value: \"160\"\n            },\n            {\n              value: \"440\"\n            },\n            {\n              value: \"350\"\n            }\n          ]\n        },\n        {\n          seriesname: \"Oil\",\n          data: [\n            {\n              value: \"60\"\n            },\n            {\n              value: \"200\"\n            },\n            {\n              value: \"200\"\n            },\n            {\n              value: \"50\"\n            },\n            {\n              value: \"230\"\n            },\n            {\n              value: \"150\"\n            }\n          ]\n        }\n      ]\n    }\n    return {payload: {chartData: chartData}}\n}\nreturn null","outputs":1,"noerr":0,"x":720,"y":40,"wires":[["c23da2f2.dc8dd"]]},{"id":"8240be10.f697f","type":"debug","z":"960d5a8b.8e7398","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":500,"y":60,"wires":[]},{"id":"c23da2f2.dc8dd","type":"link out","z":"960d5a8b.8e7398","name":"water chart","links":["e0c59597.e859b8"],"x":1210,"y":40,"wires":[],"l":true},{"id":"e0c59597.e859b8","type":"link in","z":"8f8f43f7.01481","name":"water chart","links":["c23da2f2.dc8dd"],"x":180,"y":60,"wires":[["a307b512.8aac68"]],"l":true},{"id":"a307b512.8aac68","type":"function","z":"8f8f43f7.01481","name":"water:chart formatting","func":"return {payload: {water: {chart: {stackedData: msg.payload.chartData}}}}","outputs":1,"noerr":0,"x":360,"y":60,"wires":[["8001c5fb.066008","3989bd20.f78b52"]]},{"id":"e0a36cb5.e0925","type":"function","z":"960d5a8b.8e7398","name":"update daily/weekly/monthly/yearly","func":"//update db\nif(msg.payload.newDay){\n    const dailyProcess = global.get('child_process').fork('/home/david/.node-red/updateDaily.js', [flow.get('mongoDbWaterUrl'), msg.payload.nowDate])\n    dailyProcess.on('message', function( childMsg ) {\n        if(childMsg.success){\n            node.send({payload: \"new day\"})\n            if(msg.payload.newWeek){\n                const weeklyProcess = global.get('child_process').fork('/home/david/.node-red/updateWeekly.js', [flow.get('mongoDbWaterUrl'), msg.payload.nowDate, msg.payload.lastSeenDate])\n            }\n            if(msg.payload.newMonth){\n                const monthlyProcess = global.get('child_process').fork('/home/david/.node-red/updateMonthly.js', [flow.get('mongoDbWaterUrl'), msg.payload.nowDate, msg.payload.lastSeenDate])\n                monthlyProcess.on('message', function( childMsg ) {\n                    if(childMsg.success){\n                        if(msg.payload.newYear){\n                            const yearlyProcess = global.get('child_process').fork('/home/david/.node-red/updateYearly.js', [flow.get('mongoDbWaterUrl'), msg.payload.nowDate, msg.payload.lastSeenDate])\n                        }\n                    }\n                })\n            }\n        }\n    })\n}","outputs":1,"noerr":0,"x":760,"y":240,"wires":[["fd517ee2.6d085","97d83fd9.85102"]]},{"id":"8a0117ca.8edf88","type":"inject","z":"960d5a8b.8e7398","name":"","topic":"","payload":"{\"whatsNew\":{\"newDay\":true}}","payloadType":"json","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":110,"y":460,"wires":[["c35c8dca.8ea7a"]]},{"id":"3d57cf83.ac708","type":"function","z":"960d5a8b.8e7398","name":"next flow","func":"if(flow.get(\"currentDate\")<flow.get(\"endDate\")){\n    //console.log(flow.get(\"second\"))\n    //console.log(flow.get(\"durationSeconds\"))\n    //console.log(flow.get(\"flowPeriod\"))\n    //console.log(flow.get(\"fakeDate\"))\n    var minutesJump = 0, dayJump = 0\n    if(Number(flow.get(\"second\"))%Number(flow.get(\"flowPeriod\"))===0){\n        //console.log(\"setting new rate & period.\")\n        flow.set(\"flowRate\", flow.get(\"sourceList\", \"file\")[Math.floor(Math.random() * flow.get(\"sourceList\", \"file\").length)].clicks)\n        flow.set(\"flowPeriod\", Math.floor(Math.random() * 10)+1)\n        minutesJump = Math.floor(Math.random() * 14)\n        dayJump = 1\n    }\n    flow.set(\"second\", flow.get(\"second\")+1)\n    flow.get(\"currentDate\").setSeconds(flow.get(\"currentDate\").getSeconds()+1)\n    //flow.get(\"currentDate\").setMinutes(flow.get(\"currentDate\").getMinutes()+minutesJump)\n    flow.get(\"currentDate\").setDate(flow.get(\"currentDate\").getDate()+dayJump)\n    \n    //make sure this is the last thing to execute, and that its in this if loop\n    return {topic: \"water_monitor/flow_meter\", payload: flow.get(\"flowRate\")}\n}\n","outputs":1,"noerr":0,"x":440,"y":460,"wires":[["699ef694.57f4c8"]]},{"id":"c35c8dca.8ea7a","type":"function","z":"960d5a8b.8e7398","name":"init fake stream","func":"// create a date object for this Friday:\n//var d = new Date(year, month, day, hours, minutes, seconds, milliseconds);\nflow.set(\"currentDate\", new Date(2018, 0, 0, 0, 0, 0)) //Jan 1st 2018\nflow.set(\"endDate\", new Date(2018, 1, 1, 0, 0, 0))\n//override Date constructor so all newly constructed dates return this Friday\n\nDate = class extends Date {\n  constructor(...options) {\n    if (options.length) {\n      super(...options);\n    } else {\n      super(flow.get(\"currentDate\"));\n    }\n  }\n}\n\nflow.set(\"flowRate\", 0)\nflow.set(\"flowPeriod\", 10)\nflow.set(\"second\", 0)\n\nflow.set(\"returnGateOpen\", true)\n\nreturn {payload: \"start!\"}","outputs":1,"noerr":0,"x":260,"y":460,"wires":[["3d57cf83.ac708"]]},{"id":"6632c87.7e0ed38","type":"debug","z":"960d5a8b.8e7398","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1130,"y":260,"wires":[]},{"id":"97d83fd9.85102","type":"function","z":"960d5a8b.8e7398","name":"return gate","func":"if(msg.payload.newDay){\n    //console.log(\"newDay, returnGateOpen=false\")\n    flow.set(\"returnGateOpen\", false)\n} else if(msg.payload === \"new day\") {\n    //console.log(\"done updating, returnGateOpen=true\")\n    flow.set(\"returnGateOpen\", true)\n    if(flow.get(\"msgBlocked\")){\n        //console.log(\"done updating, msg was blocked, sending one\")\n        flow.set(\"msgBlocked\", false)\n        return msg\n    }\n} else if(flow.get(\"returnGateOpen\")){\n    //console.log(\"gate open, sending message\")\n    return msg\n} else {\n    //console.log(\"gate closed, msg blocked\")\n    flow.set(\"msgBlocked\", true)\n}","outputs":1,"noerr":0,"x":270,"y":420,"wires":[["3d57cf83.ac708"]]}]