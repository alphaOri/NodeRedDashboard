[{"id":"8f8f43f7.01481","type":"tab","label":"Dashboard","disabled":false,"info":""},{"id":"960d5a8b.8e7398","type":"tab","label":"Water","disabled":false,"info":""},{"id":"865fb592.2877c8","type":"mqtt-broker","z":"","name":"localhost-mosquitto","broker":"localhost","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"3989bd20.f78b52","type":"uibuilder","z":"8f8f43f7.01481","name":"react_ui","topic":"","url":"react_ui","fwdInMessages":false,"allowScripts":false,"allowStyles":false,"debugFE":false,"copyIndex":false,"template":"","x":740,"y":120,"wires":[["1925e68c.fc23f9"],[]]},{"id":"24dc4c67.4103f4","type":"mqtt out","z":"960d5a8b.8e7398","name":"","topic":"water_monitor/valve_control","qos":"","retain":"","broker":"865fb592.2877c8","x":900,"y":440,"wires":[]},{"id":"77cec268.a1011c","type":"mqtt out","z":"960d5a8b.8e7398","name":"","topic":"water_monitor/config","qos":"","retain":"","broker":"865fb592.2877c8","x":880,"y":560,"wires":[]},{"id":"992ceb5.f73f818","type":"mqtt out","z":"960d5a8b.8e7398","name":"","topic":"water_monitor/status_request","qos":"","retain":"","broker":"865fb592.2877c8","x":910,"y":500,"wires":[]},{"id":"f9323c77.3a6d1","type":"switch","z":"960d5a8b.8e7398","name":"","property":"topic","propertyType":"msg","rules":[{"t":"eq","v":"water_monitor/flow_meter","vt":"str"},{"t":"eq","v":"water_monitor/valve_status","vt":"str"},{"t":"eq","v":"water_monitor/config_status","vt":"str"}],"checkall":"false","repair":false,"outputs":3,"x":330,"y":280,"wires":[["57c4d280.1e83ac"],[],[]],"outputLabels":["flow_meter","valve_status","config_status"]},{"id":"ad492a61.1c54d8","type":"mqtt in","z":"960d5a8b.8e7398","name":"","topic":"water_monitor/#","qos":"0","datatype":"auto","broker":"865fb592.2877c8","x":120,"y":180,"wires":[["699ef694.57f4c8"]]},{"id":"80f459a9.9dd6f8","type":"inject","z":"960d5a8b.8e7398","name":"on startup","topic":"","payload":"","payloadType":"str","repeat":"","crontab":"","once":true,"onceDelay":"0","x":130,"y":40,"wires":[["4123a6a8.b1dac8"]]},{"id":"922e897f.95aa08","type":"function","z":"960d5a8b.8e7398","name":"when reconnected","func":"if (msg.payload == \"no timeout\") {\n    flow.set(\"water_monitor_online\", true);\n    //var newMsg = { payload: flow.get(\"wm_config_payload\")};\n    return { payload: flow.get(\"wm_config_payload\")};\n} else if (msg.payload == \"timeout\") {\n    flow.set(\"water_monitor_online\", false);\n    return null;\n}","outputs":1,"noerr":0,"x":530,"y":560,"wires":[["77cec268.a1011c","422a397b.8809a8"]]},{"id":"4123a6a8.b1dac8","type":"function","z":"960d5a8b.8e7398","name":"set vars & funcs","func":"flow.set(\"nodeRedDirectory\", global.get('path').join(global.get('os').homedir(), \".node-red\"))\n\nflow.set(\"reports_per_second\", 1);\nflow.set(\"wm_config_payload\", \"reports_per_second:\"+flow.get(\"reports_per_second\"));\nflow.set(\"TimeoutMs\", 15*60*1000) //15 minutes in milliseconds\n\n//connect to water database\nvar mongodb = global.get('mongodb')\nflow.set(\"mongoDbWaterUrl\", 'mongodb://nodered:noderedpassword@localhost:27017/?authMechanism=SCRAM-SHA-1&authSource=water')\n\nmongodb.MongoClient.connect(flow.get('mongoDbWaterUrl'), {native_parser:true}, function(err, client) {\n    if(err){\n        node.error(err)\n    } else {\n        flow.set(\"waterDb\", client.db('water'))\n        flow.set('waterDbDailyColl', client.db('water').collection(\"daily\"))\n    }\n})\n\n//source identification vars\nflow.set(\"clicksPreviousSecond\", 0)\nflow.set(\"lastStableClicks\", 0)\nflow.set(\"driftRange\", 1)\nflow.set(\"isTransitioning\", false)\nflow.set(\"currentlyRunningSources\", [])\n\nflow.set(\"sourceList\", JSON.parse(global.get('fs').readFileSync(global.get('path').join(flow.get(\"nodeRedDirectory\"), \"sourceList.json\"))))\n/*if(!flow.get(\"sourceList\", \"file\")){ \n    sourceList = [\n        { name: \"ktchn sink\", clicks: 13, quantity: 1 },\n        { name: \"bath sink\",  clicks: 17, quantity: 2 },\n        { name: \"dishwasher\", clicks: 10, quantity: 1 },\n        { name: \"toilet\",     clicks: 41, quantity: 2 },\n        { name: \"tub\",        clicks: 61, quantity: 1 },\n        { name: \"shower\",     clicks: 28, quantity: 1 },\n        { name: \"laundry\",    clicks: 33, quantity: 1 },\n        { name: \"studio\",     clicks: 36, quantity: 1 }\n    ]\n    flow.set(\"sourceList\", sourceList, \"file\") \n}*/\n\n//testing vars\nflow.set(\"testingNowDate\", undefined)\nflow.set(\"testingEnabled\", false)\n\n//functions\nflow.set(\"getNowDate\", function() { \n    if(flow.get(\"testingNowDate\")!==undefined){\n        return flow.get(\"testingNowDate\")\n    } else {\n        var now = new Date()\n        return now\n    }\n})\nflow.set(\"clicksToGallons\", function(clicks) {return (0.000925824*clicks + 0.0015719)})\n\nflow.set(\"gateOpen\", true)","outputs":1,"noerr":0,"x":320,"y":40,"wires":[[]]},{"id":"422a397b.8809a8","type":"change","z":"960d5a8b.8e7398","name":"","rules":[{"t":"set","p":"payload","pt":"msg","to":"none","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":660,"y":500,"wires":[["992ceb5.f73f818"]]},{"id":"9e917171.007cd","type":"link out","z":"960d5a8b.8e7398","name":"water daily","links":["19a0b940.f26c87"],"x":1210,"y":80,"wires":[],"l":true},{"id":"820ba66b.ca0938","type":"link in","z":"8f8f43f7.01481","name":"water flow","links":["e7a29659.12ef58"],"x":180,"y":100,"wires":[["794fef6a.78baa"]],"l":true},{"id":"e7a29659.12ef58","type":"link out","z":"960d5a8b.8e7398","name":"water flow","links":["820ba66b.ca0938"],"x":1200,"y":160,"wires":[],"l":true},{"id":"19a0b940.f26c87","type":"link in","z":"8f8f43f7.01481","name":"water daily","links":["9e917171.007cd","7876e37b.8716cc"],"x":180,"y":140,"wires":[["5c3bebc5.a3d204"]],"l":true},{"id":"794fef6a.78baa","type":"function","z":"8f8f43f7.01481","name":"water:flow formatting","func":"return {payload: {water: {liveInfo: {flow: msg.payload.toFixed(1)}}}}","outputs":1,"noerr":0,"x":360,"y":100,"wires":[["5bc47948.7f16a8"]]},{"id":"5c3bebc5.a3d204","type":"function","z":"8f8f43f7.01481","name":"water:usage formatting","func":"return {payload: {water: {liveInfo: {usage: msg.payload.toFixed(0)}}}, reset: msg.reset}","outputs":1,"noerr":0,"x":360,"y":140,"wires":[["8385c389.7de6d"]]},{"id":"1925e68c.fc23f9","type":"function","z":"8f8f43f7.01481","name":"msg router","func":"switch(msg.topic) {\n  case \"dashboard\":\n    return [msg, null, null]\n    break;\n  case \"water\":\n    return [null, msg, null]\n    break;\n  default:\n    return [null, null, msg]\n}","outputs":3,"noerr":0,"x":890,"y":80,"wires":[["3989bd20.f78b52"],["99c343e2.45a4d"],[]],"outputLabels":["dashboard","water","default"]},{"id":"25701d18.bfc8e2","type":"link in","z":"960d5a8b.8e7398","name":"UI request","links":["99c343e2.45a4d","b72764fa.7a8a68"],"x":100,"y":120,"wires":[["b1821932.a25958"]],"l":true},{"id":"99c343e2.45a4d","type":"link out","z":"8f8f43f7.01481","name":"request to water","links":["25701d18.bfc8e2"],"x":1100,"y":100,"wires":[],"l":true},{"id":"b1821932.a25958","type":"function","z":"960d5a8b.8e7398","name":"request router","func":"const now = flow.get(\"getNowDate\")()\nif(!(msg.payload == null)){\n    if(!(msg.payload.liveInfo == null)){\n        node.send([{payload: \"initialize\"}, null])\n    }\n    if(!(msg.payload.chart == null)){\n        node.send([null, {payload: msg.payload.chart}])\n    }\n}","outputs":2,"noerr":0,"x":260,"y":120,"wires":[["fd517ee2.6d085","f297b903.11e038","3e421870.1c22b8"],["84caffe0.b23b5"]],"outputLabels":["liveCard","chart"]},{"id":"cea90901.c67928","type":"function","z":"960d5a8b.8e7398","name":"set reports_per_second","func":"var obj = JSON.parse(msg.payload);\nflow.set(\"reports_per_second\", obj.reports_per_second)\nreturn {payload: flow.get(\"reports_per_second\")}","outputs":1,"noerr":0,"x":550,"y":440,"wires":[[]]},{"id":"fd517ee2.6d085","type":"function","z":"960d5a8b.8e7398","name":"today/average","func":"main().catch((err) => { console.error(err) })\n\nasync function main(){\n    var todayStart = new Date(msg.now)\n    var todayNow = new Date(todayStart)\n    var todayEnd = new Date(todayStart)\n    todayStart.setHours(0,0,0,0)\n    todayEnd.setHours(24,0,0,0)\n    var currentSecond = Math.floor((todayNow.getTime()-todayStart.getTime())/1000)\n    \n    try {\n        var todayDocPromise = flow.get('waterDbDailyColl').findOne({created: { $gte:todayStart, $lt:todayEnd }}, {projection: {allTotal: 1}})\n    } catch(error) {\n        console.error(error)  \n    }\n    try {\n        var averageDocPromise = flow.get('waterDbDailyColl').findOne({docName:\"averages\"}, {projection: {allAverage: 1, secondAverages: { $slice: [currentSecond, 1] }}})\n    } catch(error) {\n        console.error(error)\n    }\n    \n    try{\n        var todayDoc = await todayDocPromise\n        var averageDoc = await averageDocPromise\n    } catch(error) {\n        console.error(error)\n    }\n    \n    var todayTotal = {payload: null}\n    var todayMsg = {topic: \"today\", payload: {total: null, tillNow: null}}\n    var averageMsg = {topic: \"average\", payload: {total: null, tillNow: null}}\n    \n    if(todayDoc){\n        todayTotal.payload = todayDoc.allTotal\n        todayMsg.payload.tillNow = todayDoc.allTotal\n        if(msg.payload === \"initialize\" || msg.payload === \"new day\"){\n            //todayMsg.reset = true\n            todayMsg.payload.reset = true //get rid of this if find more elegant way to handle\n        }\n    } else {\n        todayTotal.payload = 0\n        todayMsg.payload.tillNow = 0 //no doc so today's allTotal must be zero\n    }\n    \n    if(averageDoc){ //check doc exists\n            if(averageDoc.secondAverages.length > 0){ //check secondAverages had the element at the index we searched for\n                var averageGallonsSoFar = averageDoc.secondAverages[0]//since we sliced in query, we only have 1 element in array\n                var todaysPrediction = averageDoc.allAverage-(averageGallonsSoFar-todayTotal.payload)\n                todayMsg.payload.total = todaysPrediction\n                averageMsg.payload = {total: averageDoc.allAverage, tillNow: averageGallonsSoFar}\n            } /*else { //no secondAverages exists, but allAverage must exist\n                node.send([{topic: \"today\", payload: {total: msg.payload, tillNow: 0}}, \n                    {topic: \"average\", payload: {total: averageDoc.allAverage, tillNow: 0}}]) //switch total and tillNow, react code uses divide by total\n            }*/\n    } else { //no averages doc exists\n        //NOTE: here we switch total and tillNow, react code uses divide by total\n        todayMsg.payload.total = todayMsg.payload.tillNow\n        todayMsg.payload.tillNow = 0\n    }\n\n    node.send([todayTotal, todayMsg, averageMsg])\n    node.done()\n}","outputs":3,"noerr":0,"x":740,"y":100,"wires":[["9e917171.007cd"],["4cd16a2b.3c3984"],["4cd16a2b.3c3984","1f55a803.ff0d88"]],"outputLabels":["todayTotal","today","average"]},{"id":"423e65d8.5a5d7c","type":"link in","z":"8f8f43f7.01481","name":"water totals","links":["607a1016.60844"],"x":170,"y":180,"wires":[["9f7d4c9e.5568f"]],"l":true},{"id":"9f7d4c9e.5568f","type":"function","z":"8f8f43f7.01481","name":"water:totals formatting","func":"var newMsg = msg\n\nObject.keys(msg.payload).forEach(function(key,index) {\n    if(!(msg.payload[key].total == null)){\n        msg.payload[key].total = Number(msg.payload[key].total.toFixed(0))\n    } \n    if(!(msg.payload[key].tillNow == null)){\n        msg.payload[key].tillNow = Number(msg.payload[key].tillNow.toFixed(0))\n    }\n});\n\nvar newMsg = {payload: null}\nif(msg.payload.today.reset){\n    delete msg.payload.today[\"reset\"]\n    newMsg.reset = true\n}\nnewMsg.payload = {water: {liveInfo: {totals: msg.payload}}}\n\n\nreturn newMsg","outputs":1,"noerr":0,"x":360,"y":180,"wires":[["58eefa4.df62204"]]},{"id":"607a1016.60844","type":"link out","z":"960d5a8b.8e7398","name":"water totals","links":["423e65d8.5a5d7c"],"x":1210,"y":120,"wires":[],"l":true},{"id":"57c4d280.1e83ac","type":"function","z":"960d5a8b.8e7398","name":"update flow, gallons, sources","func":"// input message should have\n// now = date of current data\n// payload = number of clicks\n\nmsg.payload = Number(msg.payload) //payload from water sensor arduino is a string\n\nmain().catch((err) => { console.error(err) })\n\nasync function main() {\n    var promises = []\n    var clicks = Number(msg.payload)\n    const now = new Date(msg.now)\n    var waterDateLastSeen = getAndUpdateLastSeenDate(\"waterDateLastSeen\", now)\n    //check for new day\n    var whatsNew = getWhichPeriodsAreNew(now, waterDateLastSeen)\n    //check for incomplete today/lastday\n    var [todayIncomplete, lastSeenIncomplete] = getWhichDaysIncomplete(whatsNew, now, waterDateLastSeen)\n\n    if(whatsNew.newDay){\n        try {\n            promises.push(handleNewDay(whatsNew, waterDateLastSeen, lastSeenIncomplete))\n        } catch(error) {\n            console.error(error)\n        }\n    }\n\n    identifySources(now, clicks)\n    node.send([null, null, { sources: flow.get(\"currentlyRunningSources\") }])\n\n    //update database with flow, gallon\n    if(msg.payload !== 0 || todayIncomplete  || whatsNew.newDay) { //if newday -> need to have a day doc even if there is no flow during that day\n        promises.push(updateDatabaseRecordAllTotal(now, todayIncomplete))\n    } else {\n        //send zero as flow data, this is used as trigger for getting today's prediction\n        node.send([{now: now, payload: 0}, null, null])\n    }\n\n    try {\n        await Promise.all(promises)\n    } catch(error) {\n        console.error(error)\n    }\n    node.done()\n}\n\nasync function updateDatabaseRecordAllTotal(now, todayIncomplete){\n    //search for today's doc\n    var start = new Date(now.valueOf())\n    var end = new Date(start.valueOf())\n    start.setHours(0,0,0,0)\n    end.setHours(24,0,0,0)\n    var doc = {\n        $setOnInsert: { \n            created: now\n        },\n        $currentDate: {modified: true}\n    }\n    if(msg.payload !== 0){\n        doc.$inc =  { allTotal: flow.get('clicksToGallons')(msg.payload) },\n        doc.$push = { timeRecord: { clicks: msg.payload, created: now, sources: flow.get(\"currentlyRunningSources\") }}\n    } else { //in case non-zero flow is triggering this new database entry (i.e. on a new day), we don't conflict with $inc.allTotal\n        doc.$setOnInsert.allTotal = 0\n    }\n    if(todayIncomplete){\n        doc.$set = { incomplete : true }\n    } else { \n        doc.$set = { incomplete : false } \n    }\n    try {\n        await flow.get('waterDbDailyColl').updateOne({created: { $gte:start, $lt:end }}, doc, {upsert:true, w: 1})\n    } catch(error) {\n        console.error(error)\n    }\n    node.send([{now: now, payload: flow.get('clicksToGallons')(msg.payload)*60}, null, null])\n}\n\nfunction getAndUpdateLastSeenDate(name, now){\n    var dateLastSeen\n    var waterDateLastSeenStr = flow.get(\"waterDateLastSeen\", \"file\")\n    if(waterDateLastSeenStr){\n        dateLastSeen = new Date(waterDateLastSeenStr)\n    } else {\n        dateLastSeen = new Date(now)\n    }\n\n    //update date last seen to now\n    flow.set(name, now, \"file\")\n    return dateLastSeen\n}\n\nfunction getWhichPeriodsAreNew(now, lastSeen){\n    var whatsNew = {newDay: false, nowDate: now, lastSeenDate: lastSeen}\n    if (!(lastSeen.getDate() == now.getDate() &&\n        lastSeen.getMonth() == now.getMonth() &&\n        lastSeen.getFullYear() == now.getFullYear())){\n        whatsNew.newDay = true\n        if(now.getDay()===1){ //if 1, then it's a Monday, so new week\n            whatsNew.newWeek = true\n        }\n        if(lastSeen.getMonth() !== now.getMonth()){\n            whatsNew.newMonth = true\n            if(lastSeen.getFullYear() !== now.getFullYear()){\n                whatsNew.newYear = true\n            }\n        }\n    }\n    return whatsNew\n}\n\nfunction getWhichDaysIncomplete(whatsNew, now, lastSeen){\n    var todayIncomplete = false\n    var lastSeenIncomplete = false\n    if((now.getTime()-lastSeen.getTime())>flow.get(\"TimeoutMs\")){\n        //if more than timeout since midnight\n        var lastMidnight = new Date(now.getTime())\n        lastMidnight.setHours(0,0,0,0)\n        if ((now.getTime()-lastMidnight.getTime())>flow.get(\"TimeoutMs\")){\n            todayIncomplete = true\n        }\n        if (whatsNew.newDay) {\n            var dateLastSeenMidnight = new Date(lastSeen.getTime())\n            dateLastSeenMidnight.setHours(24,0,0,0)\n            if((dateLastSeenMidnight.getTime()-lastSeen.getTime())>flow.get(\"TimeoutMs\")){\n                lastSeenIncomplete = true\n            }\n        }\n    }\n    return [todayIncomplete, lastSeenIncomplete]\n}\n\nasync function handleNewDay(whatsNew, lastSeenDate, lastSeenIncomplete){\n    if(lastSeenIncomplete){\n        // update last seen doc to incomplete\n        var start = new Date(lastSeenDate.getTime())\n        var end = new Date(start.getTime())\n        start.setHours(0,0,0,0)\n        end.setHours(24,0,0,0)\n        var doc = {\n            $set: { incomplete : true },\n            $currentDate: {modified: true}\n        }\n        try {\n            var promise = flow.get('waterDbDailyColl').update({created: { $gte:start, $lt:end }}, doc, {w: 1}).catch((e) => { console.error(e) })\n        } catch(error){\n            console.error(error)\n        }\n        node.send([null, {payload: whatsNew}, null])\n    } else {\n        node.send([null, {payload: whatsNew}, null])\n    }\n    try {\n        await promise\n    } catch(error) {\n        console.error(error)\n    }\n}\n\nfunction identifySources(now, clicks){\n    //console.log(\"identifySources(...)\")\n    //console.log(\"clicks: \"+clicks+\", clicksPreviousSecond: \"+flow.get(\"clicksPreviousSecond\")+\", margin: \"+(flow.get(\"currentlyRunningSources\").length || 1)*flow.get(\"driftRange\")+\n    //    \", currentlyRunningSources: \"+flow.get(\"currentlyRunningSources\")\n\n    if(!isValueInRange(clicks, flow.get(\"clicksPreviousSecond\"), flow.get(\"driftRange\"))) {\n        if(flow.get(\"isTransitioning\")!==true) {\n            flow.set(\"isTransitioning\", true) //set even if already set\n            flow.set(\"lastStableClicks\", flow.get(\"clicksPreviousSecond\"))\n        }\n    } else { //not in transition\n        if(flow.get(\"isTransitioning\")){ //transition has just completed\n            var signature = clicks-flow.get(\"lastStableClicks\")\n            var currentlyRunningSources = flow.get(\"currentlyRunningSources\")\n            var sourceList = flow.get(\"sourceList\")\n            if(!tryFindAndHandleSourceMatch(signature, sourceList, currentlyRunningSources)) { \n                //no source match or could not handle match, so add/remove to/from unknown\n                var currentlyRunningSourcesTotal = getCurrentlyRunningSourcesTotal(currentlyRunningSources)\n                if(signature > 0){\n                    addToUnknownSource(signature, currentlyRunningSources, currentlyRunningSourcesTotal)\n                } else {\n                    removeFromUnknownSource(signature, currentlyRunningSources, currentlyRunningSourcesTotal)\n                }\n            }\n                        \n            //update global variables\n            flow.set(\"currentlyRunningSources\", currentlyRunningSources)\n            flow.set(\"isTransitioning\", false)\n        }\n    }\n    //set \"clicksPreviousSecond\", signature calculation uses \"lastStableClicks\" so we don't have to worry about slow drifting\n    flow.set(\"clicksPreviousSecond\", clicks)\n    //failsafe\n    if(clicks === 0){ flow.set(\"currentlyRunningSources\", []) }\n}\n\nfunction tryFindAndHandleSourceMatch(signature, sourceList, currentlyRunningSources){\n    //console.log(\"tryFindAndHandleSourceMatch(...)\")\n    var found = false\n    for(let i = 0; i<sourceList.length; i++){\n        if(isMatch(signature, sourceList[i])){\n            if(signature>0){ //position transition so add it, this is always true when called to identify \"unknown\" category\n                found = addSource(sourceList[i], currentlyRunningSources) //found could be false if already had max number of sources\n            } else { //negative transition so remove it\n                found = removeSource(sourceList[i], currentlyRunningSources) //found could be false if matched source didn't exists in currentlyRunningSources so it should be taken from \"unknown\"\n            }\n            //console.log(\"currentlyRunningSources: \"+currentlyRunningSources)\n            break //found match so don't need to search anymore\n        }\n    } \n    return found\n}\n\nfunction isMatch(signature, sourceListItem){\n    return isValueInRange(Math.abs(signature), sourceListItem.median, sourceListItem.range) //can't use currentDrift because reference signatures are too close\n}\n\nfunction isValueInRange(value, median, range){\n    //console.log(\"isInRange(...)\")\n    return Math.abs(value-median)<=range\n}\n\n//adds sourceListItem into currentlyRunningSources - adds new if doesn't exist, increment quantity if it does\n//returns true if successful\nfunction addSource(sourceListItem, currentlyRunningSources, currentSourcesOn){\n    //console.log(\"addNewSource(...)\")\n    let isSuccessfullyAdded = false\n    //check that we don't already have max sources of this type on\n    var numberOfTheseSources = getNumberOfTheseSources(sourceListItem, currentlyRunningSources)\n    if(numberOfTheseSources === 0){ //if doesn't exist in currentlyRunningSources yet...\n        currentlyRunningSources.push({name: sourceListItem.name, clicks: sourceListItem.median, quantity: 1})\n        isSuccessfullyAdded = true\n    } else { //if exists already, add another\n        for(let j=0; j<currentlyRunningSources.length; j++){\n            if(currentlyRunningSources[j].name === sourceListItem.name){\n                isSuccessfullyAdded=true\n                currentlyRunningSources[j].clicks += sourceListItem.median\n                currentlyRunningSources[j].quantity++\n                break\n            }\n        }\n    }\n    return isSuccessfullyAdded\n}\n\n//removes sourceListItem from currentlyRunningSources if it is present\n//returns true if successful\nfunction removeSource(sourceListItem, currentlyRunningSources, currentSourcesOn){\n    //console.log(\"removeSource(...)\")\n    let isSuccessfullyRemoved = false\n    for(let j=0; j<currentlyRunningSources.length; j++){\n        if(currentlyRunningSources[j].name === sourceListItem.name){\n            isSuccessfullyRemoved=true\n            if(currentlyRunningSources[j].quantity>1){\n                currentlyRunningSources[j].clicks -= sourceListItem.median\n                currentlyRunningSources[j].quantity--\n            } else {\n                currentlyRunningSources.splice(j, 1)\n            }\n            break\n        }\n    }\n    return isSuccessfullyRemoved\n}\n\nfunction getNumberOfTheseSources(sourceListItem, currentlyRunningSources){\n    for(var j=0; j<currentlyRunningSources.length; j++){\n        if(currentlyRunningSources[j].name === sourceListItem.name)\n        { \n            return currentlyRunningSources[j].quantity \n        }\n    }\n    return 0\n}\n\nfunction getCurrentlyRunningSourcesTotal(currentlyRunningSources){\n    let currentlyRunningSourcesTotal = 0\n    for(let i=0; i<currentlyRunningSources.length; i++){\n        currentlyRunningSourcesTotal += currentlyRunningSources[i].clicks\n    } \n    return currentlyRunningSourcesTotal\n}\n\n//adds signature to sources \"unknown\" if exist, otherwise, creates source \"unknown\"\nfunction addToUnknownSource(signature, currentlyRunningSources, currentlyRunningSourcesTotal){\n    //console.log(\"addToUnknownSource(...)\")\n    let isSuccessfullyAdded = true\n    if(currentlyRunningSources.length>0 && currentlyRunningSources[0].name===\"unknown\") { //if \"unknown\" is in array, it will always be first\n        currentlyRunningSources[0].clicks += signature\n    } else { //need to add \"unknown\" as first element in array\n        currentlyRunningSources.unshift({name: \"unknown\", clicks: signature, quantity: 1})\n    }\n    return isSuccessfullyAdded\n}\n\n//removes signature from unknown if exists and removes unknown if it is zero or less, otherwise does nothing\nfunction removeFromUnknownSource(signature, currentlyRunningSources, currentlyRunningSourcesTotal){\n    //console.log(\"removeFromFirstSource(...)\")\n    let isSuccessfullyRemoved = false\n    if(currentlyRunningSources.length>0 && currentlyRunningSources[0].name===\"unknown\"){\n        currentlyRunningSources[0].clicks += signature\n        if(currentlyRunningSources[0].clicks <= 0){\n            currentlyRunningSources.splice(0, 1)\n        }\n        isSuccessfullyRemoved = true\n    } else { } //no unknown source, nothing we can accurately do...\n    return isSuccessfullyRemoved\n}","outputs":3,"noerr":0,"x":480,"y":180,"wires":[["e7a29659.12ef58","fd517ee2.6d085","e8ca1c77.94587"],["e0a36cb5.e0925","1f55a803.ff0d88"],["d2c35a33.048b68"]],"outputLabels":["flow","new day","sources"]},{"id":"5bc47948.7f16a8","type":"rbe","z":"8f8f43f7.01481","name":"","func":"rbe","gap":"","start":"","inout":"out","property":"payload","x":530,"y":100,"wires":[["3989bd20.f78b52"]]},{"id":"8385c389.7de6d","type":"rbe","z":"8f8f43f7.01481","name":"","func":"rbe","gap":"","start":"","inout":"out","property":"payload","x":530,"y":140,"wires":[["3989bd20.f78b52"]]},{"id":"4cd16a2b.3c3984","type":"join","z":"960d5a8b.8e7398","name":"","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":true,"timeout":"","count":"3","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1070,"y":120,"wires":[["607a1016.60844"]]},{"id":"58eefa4.df62204","type":"rbe","z":"8f8f43f7.01481","name":"","func":"rbe","gap":"","start":"","inout":"out","property":"payload","x":530,"y":180,"wires":[["3989bd20.f78b52"]]},{"id":"699ef694.57f4c8","type":"function","z":"960d5a8b.8e7398","name":"gate/fill message","func":"if(flow.get(\"waterDb\")===undefined){\n    //database not yet connected, do nothing\n} else if(flow.get(\"gateOpen\")===true) { //checking that all variable/function initialization has completed\n    msg.now = flow.get(\"getNowDate\")()\n    return msg;\n}\n","outputs":1,"noerr":0,"x":150,"y":280,"wires":[["f9323c77.3a6d1"]]},{"id":"d2c35a33.048b68","type":"link out","z":"960d5a8b.8e7398","name":"water sources","links":["41ced401.4b6fac"],"x":1220,"y":200,"wires":[],"l":true},{"id":"41ced401.4b6fac","type":"link in","z":"8f8f43f7.01481","name":"water sources","links":["d2c35a33.048b68"],"x":170,"y":220,"wires":[["da518dc6.4a46"]],"l":true},{"id":"da518dc6.4a46","type":"rbe","z":"8f8f43f7.01481","name":"","func":"rbe","gap":"","start":"","inout":"out","property":"sources","x":310,"y":220,"wires":[["324ebaba.989c06"]]},{"id":"324ebaba.989c06","type":"function","z":"8f8f43f7.01481","name":"water:sources formatting","func":"var newMsg = {payload: {water: {liveInfo: {sources: []}}}}\nfor (let i=0; i<msg.sources.length; i++){\n    for(let j=0; j<msg.sources[i].quantity; j++){\n        newMsg.payload.water.liveInfo.sources.push({name: msg.sources[i].name, clicks: msg.sources[i].clicks/msg.sources[i].quantity})\n    }\n}\nreturn newMsg;","outputs":1,"noerr":0,"x":490,"y":220,"wires":[["3989bd20.f78b52"]]},{"id":"84caffe0.b23b5","type":"function","z":"960d5a8b.8e7398","name":"get chartData","func":"if(msg.payload.range === \"now\"){\n    /*var chartData = {\n      chart: {\n        caption: \"Yearly Energy Production\",\n        numbersuffix: \" TWh\",\n        formatnumberscale: \"0\",\n        showvalues: \"0\",\n        drawcrossline: \"1\",\n        showsum: \"1\",\n        plottooltext: \"$dataValue from $seriesName\",\n        theme: \"candy\"\n      },\n      categories: [\n        {\n          category: [\n            {\n              label: \"Canada\"\n            },\n            {\n              label: \"China\"\n            },\n            {\n              label: \"Russia\"\n            },\n            {\n              label: \"Australia\"\n            },\n            {\n              label: \"United States\"\n            },\n            {\n              label: \"France\"\n            }\n          ]\n        }\n      ],\n      dataset: [\n        {\n          seriesname: \"Coal\",\n          data: [\n            {\n              value: \"400\"\n            },\n            {\n              value: \"830\"\n            },\n            {\n              value: \"500\"\n            },\n            {\n              value: \"420\"\n            },\n            {\n              value: \"790\"\n            },\n            {\n              value: \"380\"\n            }\n          ]\n        },\n        {\n          seriesname: \"Hydro\",\n          data: [\n            {\n              value: \"350\"\n            },\n            {\n              value: \"620\"\n            },\n            {\n              value: \"410\"\n            },\n            {\n              value: \"370\"\n            },\n            {\n              value: \"720\"\n            },\n            {\n              value: \"310\"\n            }\n          ]\n        },\n        {\n          seriesname: \"Nuclear\",\n          data: [\n            {\n              value: \"210\"\n            },\n            {\n              value: \"400\"\n            },\n            {\n              value: \"450\"\n            },\n            {\n              value: \"180\"\n            },\n            {\n              value: \"570\"\n            },\n            {\n              value: \"270\"\n            }\n          ]\n        },\n        {\n          seriesname: \"Gas\",\n          data: [\n            {\n              value: \"180\"\n            },\n            {\n              value: \"330\"\n            },\n            {\n              value: \"230\"\n            },\n            {\n              value: \"160\"\n            },\n            {\n              value: \"440\"\n            },\n            {\n              value: \"350\"\n            }\n          ]\n        },\n        {\n          seriesname: \"Oil\",\n          data: [\n            {\n              value: \"60\"\n            },\n            {\n              value: \"200\"\n            },\n            {\n              value: \"200\"\n            },\n            {\n              value: \"50\"\n            },\n            {\n              value: \"230\"\n            },\n            {\n              value: \"150\"\n            }\n          ]\n        }\n      ]\n    }*/\n    flow.set(\"currentChartInit\", true)\n    flow.set(\"currentChartRange\", \"now\")\n    //return {payload: chartData}\n} else {\n    flow.set(\"currentChartRange\", \"undefined\")\n}\nreturn null","outputs":1,"noerr":0,"x":740,"y":20,"wires":[["c23da2f2.dc8dd"]]},{"id":"c23da2f2.dc8dd","type":"link out","z":"960d5a8b.8e7398","name":"water chart","links":["e0c59597.e859b8"],"x":1210,"y":40,"wires":[],"l":true},{"id":"e0c59597.e859b8","type":"link in","z":"8f8f43f7.01481","name":"water chart","links":["c23da2f2.dc8dd"],"x":180,"y":60,"wires":[["a307b512.8aac68"]],"l":true},{"id":"a307b512.8aac68","type":"function","z":"8f8f43f7.01481","name":"water:chart formatting","func":"return {payload: {water: {chart: {chartData: msg.payload}}}}","outputs":1,"noerr":0,"x":360,"y":60,"wires":[["3989bd20.f78b52"]]},{"id":"e0a36cb5.e0925","type":"function","z":"960d5a8b.8e7398","name":"update daily/weekly/monthly/yearly","func":"//expected input msg has:\n//msg.payload = whatsNew\n\n//update db\nif(msg.payload.newDay){\n    var updateScriptPath = global.get('path').join(flow.get(\"nodeRedDirectory\"), \"updateDatabase.js\")\n    //console.log(updateScriptPath)\n    try {\n        var updateStartTime = new Date()\n        const updateProcess = global.get('child_process').fork(updateScriptPath, [flow.get('mongoDbWaterUrl'), JSON.stringify(msg.payload)])\n        updateProcess.on('message', function( childMsg ) {\n            if(childMsg.success){\n                var updateEndTime = new Date()\n                var updateTime = updateEndTime.getTime()-updateStartTime.getTime()\n                console.log(\"update time was \"+updateTime+\" milliseconds\")\n                node.send({now: msg.payload.nowDate, payload: \"new day\"})\n                node.done()\n            }\n        })\n    } catch(error) {\n        console.error(error)\n    }\n}","outputs":1,"noerr":0,"x":800,"y":240,"wires":[["f297b903.11e038","fd517ee2.6d085","1f55a803.ff0d88"]]},{"id":"f297b903.11e038","type":"function","z":"960d5a8b.8e7398","name":"yesterday","func":"var todayStart = new Date(msg.now)\nvar yesterdayStart = new Date(todayStart)\nyesterdayStart.setDate(todayStart.getDate()-1)\nvar yesterdayEnd = new Date(yesterdayStart)\nyesterdayStart.setHours(0,0,0,0)\nyesterdayEnd.setHours(24,0,0,0)\n\nmain().catch((err) => { console.error(err) })\n\nasync function main(){\n    try {\n        var yesterdayDocPromise = flow.get('waterDbDailyColl').findOne({created: { $gte:yesterdayStart, $lt:yesterdayEnd }}, {projection: {allTotal: 1}})\n    } catch(error) {\n        console.error(error)\n    }\n    \n    try {\n        var yesterdayDoc = await yesterdayDocPromise\n    } catch(error) {\n        console.error(error)\n    }\n    \n    var yesterdayMsg = {topic: \"yesterday\", payload: {total: null, tillNow: null}}\n    \n    if(yesterdayDoc){\n        yesterdayMsg = {topic: \"yesterday\", payload: {total: yesterdayDoc.allTotal, tillNow: 0}}\n    } /*else {\n        console.log(\"no yesterday doc, yesterday doc = \"+yesterdayDoc+\" yesterdayStart = \"+yesterdayStart+\", yesterdayEnd = \"+yesterdayEnd)\n    }*/\n    \n    node.send(yesterdayMsg)\n    node.done()\n}","outputs":1,"noerr":0,"x":720,"y":140,"wires":[["4cd16a2b.3c3984"]]},{"id":"7d9bb422.65e6ec","type":"mqtt in","z":"960d5a8b.8e7398","name":"","topic":"testing/now","qos":"0","datatype":"auto","broker":"865fb592.2877c8","x":110,"y":380,"wires":[["5239ac2d.847414"]]},{"id":"5239ac2d.847414","type":"function","z":"960d5a8b.8e7398","name":"set now","func":"//console.log(msg)\ntry{\n    var nowDate = new Date(msg.payload)\n} catch(error){\n    throw new Error(error)\n}\nflow.set(\"testingNowDate\", nowDate)\n//console.log(\"testingNowDate: \"+flow.get(\"testingNowDate\")+\", getNowDate: \"+flow.get(\"getNowDate\")())\nreturn {payload: nowDate}","outputs":1,"noerr":0,"x":100,"y":420,"wires":[["9765ee1c.54123"]]},{"id":"1f55a803.ff0d88","type":"function","z":"960d5a8b.8e7398","name":"done Gate","func":"if(flow.get(\"testingEnabled\")){\n    if(msg.payload.newDay){\n        //console.log(\"newDay, returnGateOpen=false\")\n        flow.set(\"returnGateOpen\", false)\n    } else if(msg.payload === \"new day\") {\n        //console.log(\"done updating, returnGateOpen=true\")\n        flow.set(\"returnGateOpen\", true)\n        if(flow.get(\"msgBlocked\")){\n            //console.log(\"done updating, msg was blocked, sending one\")\n            flow.set(\"msgBlocked\", false)\n        }\n    } else if(flow.get(\"returnGateOpen\")){\n        //console.log(\"gate open, sending message\")\n        var sources = flow.get(\"currentlyRunningSources\").map(a => (a.name+\"-\"+a.clicks))\n        return {payload:sources.toString()}\n    } else {\n        //console.log(\"gate closed, msg blocked\")\n        flow.set(\"msgBlocked\", true)\n    }\n}","outputs":1,"noerr":0,"x":1050,"y":280,"wires":[["59dba63.2790f58"]]},{"id":"59dba63.2790f58","type":"mqtt out","z":"960d5a8b.8e7398","name":"","topic":"testing/ready","qos":"0","retain":"","broker":"865fb592.2877c8","x":1210,"y":280,"wires":[]},{"id":"18275ab6.5bbe05","type":"mqtt in","z":"960d5a8b.8e7398","name":"","topic":"testing/lastSeen","qos":"0","datatype":"auto","broker":"865fb592.2877c8","x":120,"y":460,"wires":[["4025ffc1.14f9d"]]},{"id":"4025ffc1.14f9d","type":"function","z":"960d5a8b.8e7398","name":"set lastSeen","func":"//console.log(msg)\ntry{\n    var lastSeenDate = new Date(msg.payload)\n} catch(error){\n    throw new Error(error)\n}\nflow.set(\"waterDateLastSeen\", lastSeenDate, \"file\")\n//console.log(flow.get(\"waterDateLastSeen\", \"file\"))\nreturn {payload: lastSeenDate}","outputs":1,"noerr":0,"x":110,"y":500,"wires":[["9765ee1c.54123"]]},{"id":"9765ee1c.54123","type":"function","z":"960d5a8b.8e7398","name":"enable Testing","func":"if(flow.get(\"testingEnabled\")===false){\n    flow.set(\"TimeoutMs\", 60*60*1000)\n    flow.set(\"returnGateOpen\", true)\n    flow.set(\"testingEnabled\", true)\n    return {payload: \"testing enabled, gate open\"}\n}","outputs":1,"noerr":0,"x":120,"y":540,"wires":[[]]},{"id":"70221827.215ba8","type":"inject","z":"960d5a8b.8e7398","name":"manual update trigger","topic":"","payload":"{\"newDay\":true,\"newWeek\":true,\"newMonth\":false,\"newYear\":false,\"nowDate\":\"2016-03-14T04:55:19.000Z\",\"lastSeenDate\":\"2016-03-14T03:56:18.000Z\"}","payloadType":"json","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":520,"y":240,"wires":[["e0a36cb5.e0925"]]},{"id":"a8406c82.dd5e5","type":"debug","z":"960d5a8b.8e7398","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1150,"y":360,"wires":[]},{"id":"3e421870.1c22b8","type":"function","z":"960d5a8b.8e7398","name":"sources","func":"return { sources: flow.get(\"currentlyRunningSources\"), reset: true }","outputs":1,"noerr":0,"x":720,"y":173,"wires":[["d2c35a33.048b68"]]},{"id":"ee3c4384.6c489","type":"debug","z":"8f8f43f7.01481","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":720,"y":300,"wires":[]},{"id":"e8ca1c77.94587","type":"function","z":"960d5a8b.8e7398","name":"live chart data","func":"if(flow.get(\"currentChartRange\")===\"now\"){\n    var now = new Date(msg.now)\n    \n    label = now.getMinutes() + \":\" +\n    addLeadingZero(now.getSeconds())\n    \n    showValuesStr = \"&showLabel=0\"\n    if(flow.get(\"currentChartInit\")){\n        flow.set(\"currentChartInit\", false)\n    }\n    if((now.getSeconds()%10)==0){\n        showValuesStr = \"&showLabel=1\"\n    }\n    \n    // Build Data String in format &label=...&value=...\n    strData = \"&label=\"+label+showValuesStr+\"&value=\"+msg.payload\n    \n    return {payload: strData}\n}\n\nfunction addLeadingZero(num) {\nreturn (num <= 9) ? (\"0\" + num) : num;\n}","outputs":1,"noerr":0,"x":740,"y":52,"wires":[["c23da2f2.dc8dd"]]}]