[{"id":"8f8f43f7.01481","type":"tab","label":"Dashboard","disabled":false,"info":""},{"id":"960d5a8b.8e7398","type":"tab","label":"Water","disabled":false,"info":""},{"id":"865fb592.2877c8","type":"mqtt-broker","z":"","name":"localhost-mosquitto","broker":"localhost","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"d159396.8c5adc8","type":"mongodb","z":"","hostname":"127.0.0.1","port":"27017","db":"water","name":""},{"id":"3989bd20.f78b52","type":"uibuilder","z":"8f8f43f7.01481","name":"react_ui","topic":"","url":"react_ui","fwdInMessages":false,"allowScripts":false,"allowStyles":false,"debugFE":false,"copyIndex":false,"template":"","x":740,"y":120,"wires":[["1925e68c.fc23f9"],[]]},{"id":"24dc4c67.4103f4","type":"mqtt out","z":"960d5a8b.8e7398","name":"","topic":"water_monitor/valve_control","qos":"","retain":"","broker":"865fb592.2877c8","x":900,"y":440,"wires":[]},{"id":"77cec268.a1011c","type":"mqtt out","z":"960d5a8b.8e7398","name":"","topic":"water_monitor/config","qos":"","retain":"","broker":"865fb592.2877c8","x":880,"y":560,"wires":[]},{"id":"992ceb5.f73f818","type":"mqtt out","z":"960d5a8b.8e7398","name":"","topic":"water_monitor/status_request","qos":"","retain":"","broker":"865fb592.2877c8","x":910,"y":500,"wires":[]},{"id":"641f97bc.a21fe8","type":"function","z":"960d5a8b.8e7398","name":"set button text","func":"var obj = JSON.parse(msg.payload);\n// below code is wrong.  needs to use above object\n/*if (msg.payload == \"open\"){\n    flow.set(\"button_cmd\", \"close\");\n    newMsg = { payload: \"close\", \n                enabled: true };\n} else if (msg.payload == \"closed\"){\n    flow.set(\"button_cmd\", \"open\");\n    newMsg = { payload: \"open\",\n                enabled: true };\n} else if (msg.payload == \"closing\") {\n    flow.set(\"button_cmd\", \"open\");\n    newMsg = { payload: \"open\",\n                enabled: true };\n} else if (msg.payload == \"opening\") {\n    flow.set(\"button_cmd\", \"close\");\n    newMsg = { payload: \"close\",\n                enabled: true };\n}\nreturn newMsg;*/","outputs":1,"noerr":0,"x":540,"y":380,"wires":[[]]},{"id":"f9323c77.3a6d1","type":"switch","z":"960d5a8b.8e7398","name":"","property":"topic","propertyType":"msg","rules":[{"t":"eq","v":"water_monitor/flow_meter","vt":"str"},{"t":"eq","v":"water_monitor/valve_status","vt":"str"},{"t":"eq","v":"water_monitor/config_status","vt":"str"}],"checkall":"false","repair":false,"outputs":3,"x":350,"y":300,"wires":[["57c4d280.1e83ac"],[],["cea90901.c67928"]],"outputLabels":["flow_meter","valve_status","config_status"]},{"id":"ad492a61.1c54d8","type":"mqtt in","z":"960d5a8b.8e7398","name":"","topic":"water_monitor/#","qos":"0","datatype":"auto","broker":"865fb592.2877c8","x":120,"y":300,"wires":[["e199f265.47ce6","f9323c77.3a6d1"]]},{"id":"80f459a9.9dd6f8","type":"inject","z":"960d5a8b.8e7398","name":"on startup","topic":"","payload":"","payloadType":"str","repeat":"","crontab":"","once":true,"onceDelay":"0","x":130,"y":40,"wires":[["4123a6a8.b1dac8"]]},{"id":"922e897f.95aa08","type":"function","z":"960d5a8b.8e7398","name":"when reconnected","func":"if (msg.payload == \"no timeout\") {\n    flow.set(\"water_monitor_online\", true);\n    //var newMsg = { payload: flow.get(\"wm_config_payload\")};\n    return { payload: flow.get(\"wm_config_payload\")};\n} else if (msg.payload == \"timeout\") {\n    flow.set(\"water_monitor_online\", false);\n    return null;\n}","outputs":1,"noerr":0,"x":530,"y":560,"wires":[["77cec268.a1011c","422a397b.8809a8"]]},{"id":"4123a6a8.b1dac8","type":"function","z":"960d5a8b.8e7398","name":"set vars","func":"flow.set(\"reports_per_second\", 1);\nflow.set(\"wm_config_payload\", \"reports_per_second:\"+flow.get(\"reports_per_second\"));\nflow.set(\"TimeoutMs\", 15*60*1000) //15 minutes in milliseconds\n\n// database info\nflow.set(\"mongoHostname\", \"127.0.0.1\")\nflow.set(\"mongoPort\", \"27017\")\nflow.set(\"mongoDbName\", \"water\")\nflow.set(\"mongoDailyCollection\", \"daily\")\nflow.set(\"mongoFlowCollection\", \"flow\")\nflow.set(\"mongousername\", \"nodered\")\nflow.set(\"mongopassword\", \"noderedpassword\")\n\nflow.set(\"clicksToGallons\", function(clicks) {return (0.000925824*clicks + 0.0015719)})\n\nreturn { payload: \"next\" };","outputs":1,"noerr":0,"x":300,"y":40,"wires":[["ca06aab0.42b748"]]},{"id":"e199f265.47ce6","type":"timeout","z":"960d5a8b.8e7398","name":"timeout","outtopic":"","outsafe":"no timeout","outwarning":"Warning","outunsafe":"timeout","warning":"0","timer":"5","repeat":false,"again":false,"x":300,"y":560,"wires":[["922e897f.95aa08"]]},{"id":"422a397b.8809a8","type":"change","z":"960d5a8b.8e7398","name":"","rules":[{"t":"set","p":"payload","pt":"msg","to":"none","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":660,"y":500,"wires":[["992ceb5.f73f818"]]},{"id":"9e917171.007cd","type":"link out","z":"960d5a8b.8e7398","name":"water daily","links":["19a0b940.f26c87"],"x":1210,"y":100,"wires":[],"l":true},{"id":"820ba66b.ca0938","type":"link in","z":"8f8f43f7.01481","name":"water flow","links":["e7a29659.12ef58"],"x":180,"y":100,"wires":[["794fef6a.78baa"]],"l":true},{"id":"5e51bd8d.486ec4","type":"inject","z":"960d5a8b.8e7398","name":"","topic":"water_monitor/flow_meter","payload":"50","payloadType":"num","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":180,"y":220,"wires":[[]]},{"id":"e7a29659.12ef58","type":"link out","z":"960d5a8b.8e7398","name":"water flow","links":["820ba66b.ca0938"],"x":1200,"y":180,"wires":[],"l":true},{"id":"19a0b940.f26c87","type":"link in","z":"8f8f43f7.01481","name":"water daily","links":["9e917171.007cd","7876e37b.8716cc"],"x":180,"y":140,"wires":[["5c3bebc5.a3d204"]],"l":true},{"id":"794fef6a.78baa","type":"function","z":"8f8f43f7.01481","name":"water:flow formatting","func":"return {payload: {water: {flow: msg.payload.toFixed(1)}}}","outputs":1,"noerr":0,"x":360,"y":100,"wires":[["5bc47948.7f16a8"]]},{"id":"5c3bebc5.a3d204","type":"function","z":"8f8f43f7.01481","name":"water:usage formatting","func":"return {payload: {water: {usage: msg.payload.toFixed(0)}}, reset: msg.reset}","outputs":1,"noerr":0,"x":360,"y":140,"wires":[["8385c389.7de6d"]]},{"id":"1925e68c.fc23f9","type":"function","z":"8f8f43f7.01481","name":"msg router","func":"switch(msg.topic) {\n  case \"dashboard\":\n    return [msg, null, null]\n    break;\n  case \"water\":\n    return [null, msg, null]\n    break;\n  default:\n    return [null, null, msg]\n}","outputs":3,"noerr":0,"x":890,"y":120,"wires":[["3989bd20.f78b52"],["99c343e2.45a4d"],[]],"outputLabels":["dashboard","water","default"]},{"id":"25701d18.bfc8e2","type":"link in","z":"960d5a8b.8e7398","name":"UI request","links":["99c343e2.45a4d","b72764fa.7a8a68"],"x":100,"y":120,"wires":[["b1821932.a25958"]],"l":true},{"id":"99c343e2.45a4d","type":"link out","z":"8f8f43f7.01481","name":"request to water","links":["25701d18.bfc8e2"],"x":1100,"y":100,"wires":[],"l":true},{"id":"b1821932.a25958","type":"function","z":"960d5a8b.8e7398","name":"request router","func":"switch(msg.payload) {\n  case \"initialize\":\n    return [{payload: \"initialize\", reset: true}, null]\n    break;\n  default:\n    return [null, null]\n}","outputs":2,"noerr":0,"x":260,"y":120,"wires":[["b53c20e6.4ed04","fd517ee2.6d085"],[]],"outputLabels":["initialize",""]},{"id":"b53c20e6.4ed04","type":"function","z":"960d5a8b.8e7398","name":"get daily.gallon","func":"start = new Date()\nend = new Date(start.valueOf())\nstart.setHours(0,0,0,0)\nend.setHours(24,0,0,0)\nflow.get('waterDbDailyColl').findOne({created: { $gt:start, $lt:end }}, {gallons: 1}, function(err, doc) {\n    if(err){ node.error(err) } \n    else {\n        if(doc){\n            node.send({payload: doc.gallons, reset: msg.reset}) //reset defined only with msg.reset is defined\n        }\n    }\n})","outputs":1,"noerr":0,"x":680,"y":120,"wires":[["9e917171.007cd"]]},{"id":"9582ff31.ef3bf","type":"inject","z":"960d5a8b.8e7398","name":"","topic":"water","payload":"","payloadType":"str","repeat":"1","crontab":"","once":false,"onceDelay":0.1,"x":120,"y":180,"wires":[["b33249b4.ab2f58"]]},{"id":"b33249b4.ab2f58","type":"function","z":"960d5a8b.8e7398","name":"Random","func":"rnd = (Math.random() * 150).toFixed(0);\nreturn {topic: \"water_monitor/flow_meter\", payload: rnd};","outputs":1,"noerr":0,"x":240,"y":180,"wires":[[]]},{"id":"cea90901.c67928","type":"function","z":"960d5a8b.8e7398","name":"set reports_per_second","func":"var obj = JSON.parse(msg.payload);\nflow.set(\"reports_per_second\", obj.reports_per_second)\nreturn {payload: flow.get(\"reports_per_second\")}","outputs":1,"noerr":0,"x":570,"y":420,"wires":[[]]},{"id":"6fbb6018.f9c2e","type":"inject","z":"960d5a8b.8e7398","name":"water_monitor/config_status...","topic":"water_monitor/config_status","payload":"{\"reports_per_second\":2}","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":180,"y":260,"wires":[[]]},{"id":"8001c5fb.066008","type":"debug","z":"8f8f43f7.01481","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":590,"y":60,"wires":[]},{"id":"fd517ee2.6d085","type":"function","z":"960d5a8b.8e7398","name":"get today, yesterday, average","func":"var todayStart = new Date()\nvar todayEnd = new Date(todayStart)\nvar yesterdayStart = new Date()\nyesterdayStart.setDate(todayStart.getDate()-1)\nvar yesterdayEnd = new Date(yesterdayStart)\ntodayStart.setHours(0,0,0,0)\ntodayEnd.setHours(24,0,0,0)\nyesterdayStart.setHours(0,0,0,0)\nyesterdayEnd.setHours(24,0,0,0)\n//get today gallons and average\nflow.get('waterDbDailyColl').findOne({created: { $gt:todayStart, $lt:todayEnd }}, {gallons: 1, average: 1}, function(err, doc) {\n    if(err){ node.error(err) } \n    else {\n        if(doc){\n            //send gallons for prediction, timestamp will be taken there\n            node.send([{payload: doc.gallons}, null])\n            if(msg.payload === \"initialize\" || msg.payload === \"new day\"){\n                node.send([null, {topic: \"average\", payload: doc.average}])\n            }\n        }\n    }\n})\nif(msg.payload === \"initialize\" || msg.payload === \"new day\"){\n    //get yesterday gallons\n    flow.get('waterDbDailyColl').findOne({created: { $gt:yesterdayStart, $lt:yesterdayEnd }}, {gallons: 1}, function(err, doc) {\n        if(err){ node.error(err) } \n        else {\n            if(doc){\n                node.send([null, {topic: \"yesterday\", payload: doc.gallons}])\n            }\n        }\n    })\n}","outputs":2,"noerr":0,"x":880,"y":280,"wires":[["6b68cef9.9fa15"],["4cd16a2b.3c3984"]]},{"id":"423e65d8.5a5d7c","type":"link in","z":"8f8f43f7.01481","name":"water totals","links":["607a1016.60844"],"x":170,"y":180,"wires":[["9f7d4c9e.5568f"]],"l":true},{"id":"9f7d4c9e.5568f","type":"function","z":"8f8f43f7.01481","name":"water:totals formatting","func":"var today, yesterday, average\ntoday = yesterday = average = null\nif(msg.payload.today !== null && msg.payload.today !== undefined ) { today = msg.payload.today.toFixed(0) }\nif(msg.payload.yesterday !== null && msg.payload.yesterday !== undefined ) { yesterday = msg.payload.yesterday.toFixed(0) }\nif(msg.payload.average !== null && msg.payload.average !== undefined ) { average = msg.payload.average.toFixed(0) }\n\nreturn {payload: {water: {totals: {today: today, yesterday: yesterday, average: average}}}}","outputs":1,"noerr":0,"x":360,"y":180,"wires":[["3989bd20.f78b52"]]},{"id":"607a1016.60844","type":"link out","z":"960d5a8b.8e7398","name":"water totals","links":["423e65d8.5a5d7c"],"x":1210,"y":140,"wires":[],"l":true},{"id":"57c4d280.1e83ac","type":"function","z":"960d5a8b.8e7398","name":"update daily","func":"msg.payload = Number(msg.payload)\n\n//get last date we checked\nvar waterDateLastSeen\nvar waterDateLastSeenStr = flow.get(\"waterDateLastSeen\", \"file\")\nif (!waterDateLastSeenStr){\n    waterDateLastSeen = new Date()\n} else {\n    waterDateLastSeen = new Date(waterDateLastSeenStr)\n}\n\nconst now = new Date()\n\n//update date last seen to now\nflow.set(\"waterDateLastSeen\", now, \"file\")\n\n//if new day\nvar newDay = null\nif (!(waterDateLastSeen.getDate() == now.getDate() &&\n    waterDateLastSeen.getMonth() == now.getMonth() &&\n    waterDateLastSeen.getFullYear() == now.getFullYear())){\n    newDay = {newDay: true}\n}\n\n//timeout\nvar todayIncomplete = null\nvar lastSeenIncomplete = null\nif((now.getTime()-waterDateLastSeen.getTime())>flow.get(\"TimeoutMs\")){\n    //if more than timeout since midnight\n    var lastMidnight = new Date(now.getTime())\n    lastMidnight.setHours(0,0,0,0)\n    if ((now.getTime()-lastMidnight.getTime())>flow.get(\"TimeoutMs\")){\n        todayIncomplete = true\n    }\n    if (newDay) {\n        var waterDateLastSeenMidnight = new Date(waterDateLastSeen.getTime())\n        waterDateLastSeenMidnight.setHours(24,0,0,0)\n        if((waterDateLastSeenMidnight.getTime()-waterDateLastSeen.getTime())>flow.get(\"TimeoutMs\")){\n            lastSeenIncomplete = true\n        }\n    }\n}\n\nif(newDay){\n    if(lastSeenIncomplete){\n        // update last seen doc to incomplete\n        var start = new Date(waterDateLastSeen.getTime())\n        var end = new Date(start.getTime())\n        start.setHours(0,0,0,0)\n        end.setHours(24,0,0,0)\n        var doc = {\n            $set: { incomplete : true },\n            $currentDate: {modified: true}\n        }\n        flow.get('waterDbDailyColl').update({created: { $gt:start, $lt:end }}, doc, {w: 1}, function(err, result) {\n            if(err){ node.error(err) } \n            else {\n                node.send([null, null, {payload: \"new day\"}])\n            }\n        })\n    } else {\n        node.send([null, null, {payload: \"new day\"}])\n    }\n}\n\n//update database\nif(msg.payload !== 0 || todayIncomplete) {\n    //search for today's doc\n    var start = new Date(now.valueOf())\n    var end = new Date(start.valueOf())\n    start.setHours(0,0,0,0)\n    end.setHours(24,0,0,0)\n    var doc = {\n        $setOnInsert: { \n            created: now\n        },\n        $currentDate: {modified: true}\n    }\n    if(msg.payload !== 0){\n        doc.$inc =  { gallons: flow.get('clicksToGallons')(msg.payload) },\n        doc.$push = { flow: { clicks: Number(msg.payload), created: new Date() }}\n    } else { //in case non-zero flow is triggering this new database entry (i.e. on a new day), we don't conflict with $inc.gallons\n        doc.$setOnInsert.gallons = 0\n    }\n    if(todayIncomplete){\n        doc.$set = { incomplete : true }\n    }\n    flow.get('waterDbDailyColl').update({created: { $gt:start, $lt:end }}, doc, {upsert:true, w: 1}, function(err, result) {\n        if(err){ node.error(err) } \n        else {\n            node.send([{payload: flow.get('clicksToGallons')(msg.payload)*60}, {payload: \"gallons updated\"}, null])\n        }\n    })\n}  else {\n    //send zero as flow data, this is used as trigger for getting today's prediction\n    node.send([{payload: 0}, null, null])\n}\n\n//return [ {payload: flow.get('clicksToGallons')(msg.payload)*60}, null]","outputs":3,"noerr":0,"x":470,"y":180,"wires":[["e7a29659.12ef58","fd517ee2.6d085"],["b53c20e6.4ed04"],["f07e87a.e046578"]],"outputLabels":["flow","daily trigger","new day trigger"]},{"id":"ca06aab0.42b748","type":"function","z":"960d5a8b.8e7398","name":"connect DB","func":"var mongodb = global.get('mongodb')\nvar url = \"mongodb://\"+flow.get('mongousername')+\":\"+flow.get('mongopassword')+\"@\"+\n    flow.get('mongoHostname')+\":\"+flow.get('mongoPort')+\"/\"+flow.get('mongoDbName');\n\nmongodb.MongoClient.connect(url, {native_parser:true}, function(err, db) {\n    if(err){\n        node.error(err)\n    } else {\n        flow.set(\"waterDb\", db)\n        node.send({payload: \"next\"})\n    }\n})","outputs":1,"noerr":0,"x":470,"y":40,"wires":[["47a8a5f5.77448c"]]},{"id":"47a8a5f5.77448c","type":"function","z":"960d5a8b.8e7398","name":"connect collections","func":"//flow.set('waterDbFlowColl', flow.get(\"waterDb\").collection(flow.get('mongoFlowCollection')))\nflow.set('waterDbDailyColl', flow.get(\"waterDb\").collection(flow.get('mongoDailyCollection')))","outputs":1,"noerr":0,"x":670,"y":40,"wires":[[]]},{"id":"5bc47948.7f16a8","type":"rbe","z":"8f8f43f7.01481","name":"","func":"rbe","gap":"","start":"","inout":"out","property":"payload","x":530,"y":100,"wires":[["3989bd20.f78b52"]]},{"id":"8385c389.7de6d","type":"rbe","z":"8f8f43f7.01481","name":"","func":"rbe","gap":"","start":"","inout":"out","property":"payload","x":530,"y":140,"wires":[["3989bd20.f78b52"]]},{"id":"4cd16a2b.3c3984","type":"join","z":"960d5a8b.8e7398","name":"","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":true,"timeout":"","count":"3","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1150,"y":280,"wires":[["607a1016.60844"]]},{"id":"a335c175.f4447","type":"debug","z":"960d5a8b.8e7398","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1210,"y":360,"wires":[]},{"id":"35c6acb9.435294","type":"debug","z":"960d5a8b.8e7398","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":1310,"y":320,"wires":[]},{"id":"6b68cef9.9fa15","type":"function","z":"960d5a8b.8e7398","name":"today prediction","func":"node.send({topic: \"today\", payload: msg.payload})","outputs":1,"noerr":0,"x":1040,"y":220,"wires":[["4cd16a2b.3c3984"]]},{"id":"f07e87a.e046578","type":"function","z":"960d5a8b.8e7398","name":"update average & averageDay","func":"var start = new Date()\nvar end = new Date(start.getTime())\nstart.setHours(0,0,0,0)\nend.setHours(24,0,0,0)\n//get first doc prior to today which contains an average field, only return the average and naverage fields\nflow.get('waterDbDailyColl').findOne({created: { $lt:start }}, \n    { sort: { _id: -1 }, limit: 1 }, function(err, doc) {\n    if(err){ node.error(err) } \n    else {\n        if(doc){\n            var newdoc = {  \n                $setOnInsert: { \n                    created: new Date(), \n                    gallons: 0\n                },\n                $currentDate: { modified: true }\n            }\n            if(!doc.incomplete) {\n                if(doc.average){\n                    newdoc.$set = { \n                        average : ((doc.average*doc.numavg)+doc.gallons)/(doc.numavg+1),\n                        numavg: doc.numavg+1\n                    }  \n                } else {\n                    newdoc.$set = { \n                        average : doc.gallons, \n                        numavg: 1\n                    } \n                }\n                if(doc.flow){\n                    updateAverageDay(doc.flow)//takes ~0.1ms per element on ubuntu machine, up to 8.5sec for full flow array\n                }\n            } else { //doc incomplete\n                if(doc.average){ // don't use that day's gallon data, just copy the average over\n                    newdoc.$set = { \n                        average : doc.average, \n                        numavg : doc.numavg\n                    }  \n                } else { //if incomplete and no average, can't create an average\n                    node.send({payload: \"new day\", status: \"incomplete and no average\"})\n                    return\n                }\n            }\n            flow.get('waterDbDailyColl').update({created: { $gt:start, $lt:end }}, newdoc, {upsert:true, w: 1}, function(err, result) {\n                if(err){ node.error(err) } \n                else {\n                    node.send({payload: \"new day\", status: result})\n                }\n            })\n        } else { //database has no previous documents\n            node.send({payload: \"new day\", status: \"no doc\"})\n        }\n    }\n})\n\nfunction updateAverageDay(flowData){\n    var averageDay\n    var averageDay = flow.get(\"averageDay\", \"file\")\n    if(!averageDay){ //if doesn't exist, create it!\n        var averageDay = { \n            average: 0,\n        \tnumAvg: 0,\n        \ttimeline: []\n        }\n        for (let second=1; second<=86400; second++){\n        \taverageDay.timeline.push(0)\n        }\n    }\n    var thisDayStr = flowData[0].created\n    var thisDay = new Date(thisDayStr)\n    thisDay.setHours(0,0,0,0)\n    var thisDayStart = thisDay.getTime()\n    var currentIndex = 0\n    var gallonsSoFar = 0\n\tfor(let second=1; second <= 86400; second++){\n\t    var foundOne = true\n\t\twhile(foundOne == true){\n\t\t    foundOne = false\n    \t\tif(currentIndex<flowData.length){\n\t\t        var currentTimestamp = new Date(flowData[currentIndex].created)\n    \t\t    if(second*1000 > (currentTimestamp - thisDayStart)){\n    \t\t\t\tgallonsSoFar += flow.get(\"clicksToGallons\")(flowData[currentIndex].clicks)\n    \t\t\t\tfoundOne = true\n    \t\t\t\tcurrentIndex++\n    \t\t\t}\n    \t\t}\n\t\t}\n\t\t//all entries for current second have been tallied.  Now add it to average.\n\t\taverageDay.timeline[second-1] = (averageDay.timeline[second-1]*averageDay.numAvg+gallonsSoFar)/(averageDay.numAvg+1)\n\t}\n\taverageDay.average = averageDay.timeline[averageDay.timeline.length-1]\n\taverageDay.numAvg++\n    flow.set(\"averageDay\", averageDay, \"file\")\n}","outputs":1,"noerr":0,"x":730,"y":220,"wires":[["fd517ee2.6d085"]]}]